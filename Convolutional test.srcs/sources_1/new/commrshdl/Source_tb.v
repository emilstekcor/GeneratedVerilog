// -------------------------------------------------------------
// 
// File Name: C:\Users\kyle\Desktop\Convolutional test\Convolutional test.srcs\sources_1\new\commrshdl\Source_tb.v
// Created: 2024-04-11 05:14:02
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Source_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Source_tb;



  reg  clk;
  reg  reset_x;
  wire clk_enable;
  wire DataOut_addr;  // ufix1
  wire DataOut_lastAddr;  // ufix1
  wire valid_done;  // ufix1
  wire rdEnb;
  wire valid_done_enb;  // ufix1
  reg [5:0] start_addr;  // ufix6
  wire valid_lastAddr;  // ufix1
  wire resetn;
  reg  check4_done;  // ufix1
  wire end_rsvd_done;  // ufix1
  wire end_rsvd_done_enb;  // ufix1
  wire end_rsvd_lastAddr;  // ufix1
  reg  check3_done;  // ufix1
  wire start_done;  // ufix1
  wire start_done_enb;  // ufix1
  wire start_active;  // ufix1
  wire ce_out;
  wire signed [3:0] DataOut;  // sfix4_E14
  wire start;
  wire end_rsvd;
  wire valid;
  wire start_enb;  // ufix1
  wire start_lastAddr;  // ufix1
  reg  check2_done;  // ufix1
  wire snkDone;
  wire snkDonen;
  wire tb_enb;
  reg  tb_enb_delay;
  wire DataOut_done;  // ufix1
  wire DataOut_done_enb;  // ufix1
  reg  check1_done;  // ufix1
  wire hdlc_dummy_tb_enable_signal_internal_name_only;
  wire signed [3:0] DataOut_expected_1;  // sfix4_E14
  reg signed [3:0] DataOut_ref_hold;  // sfix4_E14
  wire signed [3:0] DataOut_ref;  // sfix4_E14
  reg  DataOut_testFailure;  // ufix1
  wire start_expected_1;
  reg  start_ref_hold;
  wire start_ref;
  reg  start_testFailure;  // ufix1
  wire end_rsvd_expected_1;
  reg  end_rsvd_ref_hold;
  wire end_rsvd_ref;
  reg  end_rsvd_testFailure;  // ufix1
  wire valid_expected_1;
  reg  valid_ref_hold;
  wire valid_ref;
  reg  valid_testFailure;  // ufix1
  wire testFailure;  // ufix1

  function real absReal(input real num);
  begin
    if (num < 0)
      absReal = -num;
    else
      absReal = num;
  end
  endfunction

  function real floatHalfToReal;
  input [15:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[15]; // sign 
    if (x[14:10] == 5'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[14:10] - 15);
    conv[51:42] = x[9:0]; // mantissa 
    conv[41:0] = 42'b0;
    if (((x[14:10] == 5'h1F) && (x[9:0] != 10'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatHalfToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatSingleToReal;
  input [31:0] x;
  reg [63:0] conv;

  begin
    conv[63] = x[31]; // sign 
    if (x[30:23] == 8'b0) // exp 
      conv[62:52] = 11'b0; 
    else
      conv[62:52] = 1023 + (x[30:23] - 127);
    conv[51:29] = x[22:0]; // mantissa 
    conv[28:0] = 29'b0;
    if (((x[30:23] == 8'hFF) && (x[22:0] != 23'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatSingleToReal = $bitstoreal(conv);
  end
  endfunction

  function real floatDoubleToReal;
  input [63:0] x;
  reg [63:0] conv;

  begin
    conv[63:0] = x[63:0]; 
    if (((x[62:52] == 11'h7FF) && (x[51:0] != 52'h0))) // check for NaN 
    begin
      conv[63] = 1'b0;
      conv[62:52] = 11'h7FF;
      conv[51:0] = 52'h0;
    end
    floatDoubleToReal = $bitstoreal(conv);
  end
  endfunction

  function isFloatEpsEqual(input real a, input real b, input real eps);
  real absdiff;

  begin
    absdiff = absReal(a - b);
    if (absdiff < eps) // absolute error check 
      isFloatEpsEqual = 1;
    else if (a == b) // check infinities 
      isFloatEpsEqual = 1; 
    else if (a*b == 0.0) // either is zero 
      isFloatEpsEqual = (absdiff < eps);
    else if (absReal(a) < absReal(b)) // relative error check
      isFloatEpsEqual = absdiff/absReal(b) < eps;
    else
      isFloatEpsEqual = absdiff/absReal(a) < eps;
  end
  endfunction
  function isFloatHalfEpsEqual;
  input [15:0] x;
  input [15:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatHalfToReal(x);
    b = floatHalfToReal(y);
    isFloatHalfEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatSingleEpsEqual;
  input [31:0] x;
  input [31:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatSingleToReal(x);
    b = floatSingleToReal(y);
    isFloatSingleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction
  function isFloatDoubleEpsEqual;
  input [63:0] x;
  input [63:0] y;
  input real eps;
  real a, b;
  real absdiff;

  begin
    a = floatDoubleToReal(x);
    b = floatDoubleToReal(y);
    isFloatDoubleEpsEqual = isFloatEpsEqual(a, b, eps);
  end
  endfunction

  assign DataOut_lastAddr = 1'b1;



  assign valid_done_enb = valid_done & rdEnb;



  assign valid_lastAddr = start_addr >= 6'b110010;



  assign valid_done = valid_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_4
      if (reset_x) begin
        check4_done <= 0;
      end
      else begin
        if (valid_done_enb) begin
          check4_done <= valid_done;
        end
      end
    end

  assign end_rsvd_done_enb = end_rsvd_done & rdEnb;



  assign end_rsvd_lastAddr = start_addr >= 6'b110010;



  assign end_rsvd_done = end_rsvd_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_3
      if (reset_x) begin
        check3_done <= 0;
      end
      else begin
        if (end_rsvd_done_enb) begin
          check3_done <= end_rsvd_done;
        end
      end
    end

  assign start_done_enb = start_done & rdEnb;



  assign start_active = start_addr != 6'b110010;



  assign #2 clk_enable = rdEnb;

  Source u_Source (.clk(clk),
                   .reset_x(reset_x),
                   .clk_enable(clk_enable),
                   .ce_out(ce_out),
                   .DataOut(DataOut),  // sfix4_E14
                   .start(start),
                   .end_rsvd(end_rsvd),
                   .valid(valid)
                   );

  assign start_enb = ce_out & start_active;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 50
  always @(posedge clk)
    begin : c_process
      if (reset_x == 1'b1) begin
        start_addr <= 6'b000000;
      end
      else begin
        if (start_enb) begin
          if (start_addr >= 6'b110010) begin
            start_addr <= 6'b000000;
          end
          else begin
            start_addr <= start_addr + 6'b000001;
          end
        end
      end
    end



  assign start_lastAddr = start_addr >= 6'b110010;



  assign start_done = start_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset_x) begin
        check2_done <= 0;
      end
      else begin
        if (start_done_enb) begin
          check2_done <= start_done;
        end
      end
    end

  assign snkDonen =  ~ snkDone;



  assign tb_enb = resetn & snkDonen;



  // Delay inside enable generation: register depth 1
  always @(posedge clk)
    begin : u_enable_delay
      if (reset_x) begin
        tb_enb_delay <= 0;
      end
      else begin
        tb_enb_delay <= tb_enb;
      end
    end

  assign rdEnb = (snkDone == 1'b0 ? tb_enb_delay :
              1'b0);



  assign DataOut_done_enb = DataOut_done & rdEnb;



  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_x_gen
      reset_x <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset_x <= 1'b0;
    end

  assign resetn =  ~ reset_x;



  assign DataOut_done = DataOut_lastAddr & resetn;



  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset_x) begin
        check1_done <= 0;
      end
      else begin
        if (DataOut_done_enb) begin
          check1_done <= DataOut_done;
        end
      end
    end

  assign snkDone = check4_done & (check3_done & (check1_done & check2_done));



  assign hdlc_dummy_tb_enable_signal_internal_name_only = clk_enable & (rdEnb & tb_enb_delay);



  // Data source for DataOut_expected
  assign DataOut_expected_1 = 4'sb0000;



  // Bypass register to hold DataOut_ref
  always @(posedge clk)
    begin : DataHold_DataOut_ref
      if (reset_x) begin
        DataOut_ref_hold <= 0;
      end
      else begin
        if (hdlc_dummy_tb_enable_signal_internal_name_only) begin
          DataOut_ref_hold <= DataOut_expected_1;
        end
      end
    end

  // Data source for DataOut_expected
  assign DataOut_ref = (hdlc_dummy_tb_enable_signal_internal_name_only == 1'b0 ? DataOut_ref_hold :
              4'sb0000);



  always @(posedge clk)
    begin : DataOut_checker
      if (reset_x == 1'b1) begin
        DataOut_testFailure <= 1'b0;
      end
      else begin
        if (hdlc_dummy_tb_enable_signal_internal_name_only == 1'b1 && DataOut !== DataOut_ref) begin
          DataOut_testFailure <= 1'b1;
          $display("ERROR in DataOut at time %t : Expected '%h' Actual '%h'", $time, DataOut_ref, DataOut);
        end
      end
    end

  // Data source for start_expected
  assign start_expected_1 = 1'b0;



  // Bypass register to hold start_ref
  always @(posedge clk)
    begin : DataHold_start_ref
      if (reset_x) begin
        start_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          start_ref_hold <= start_expected_1;
        end
      end
    end

  // Data source for start_expected
  assign start_ref = (ce_out == 1'b0 ? start_ref_hold :
              1'b0);



  always @(posedge clk)
    begin : start_checker
      if (reset_x == 1'b1) begin
        start_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && start !== start_ref) begin
          start_testFailure <= 1'b1;
          $display("ERROR in start at time %t : Expected '%h' Actual '%h'", $time, start_ref, start);
        end
      end
    end

  // Data source for end_rsvd_expected
  assign end_rsvd_expected_1 = 1'b0;



  // Bypass register to hold end_rsvd_ref
  always @(posedge clk)
    begin : DataHold_end_rsvd_ref
      if (reset_x) begin
        end_rsvd_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          end_rsvd_ref_hold <= end_rsvd_expected_1;
        end
      end
    end

  // Data source for end_rsvd_expected
  assign end_rsvd_ref = (ce_out == 1'b0 ? end_rsvd_ref_hold :
              1'b0);



  always @(posedge clk)
    begin : end_rsvd_checker
      if (reset_x == 1'b1) begin
        end_rsvd_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && end_rsvd !== end_rsvd_ref) begin
          end_rsvd_testFailure <= 1'b1;
          $display("ERROR in end_rsvd at time %t : Expected '%h' Actual '%h'", $time, end_rsvd_ref, end_rsvd);
        end
      end
    end

  // Data source for valid_expected
  assign valid_expected_1 = 1'b0;



  // Bypass register to hold valid_ref
  always @(posedge clk)
    begin : DataHold_valid_ref
      if (reset_x) begin
        valid_ref_hold <= 0;
      end
      else begin
        if (ce_out) begin
          valid_ref_hold <= valid_expected_1;
        end
      end
    end

  // Data source for valid_expected
  assign valid_ref = (ce_out == 1'b0 ? valid_ref_hold :
              1'b0);



  always @(posedge clk)
    begin : valid_checker
      if (reset_x == 1'b1) begin
        valid_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && valid !== valid_ref) begin
          valid_testFailure <= 1'b1;
          $display("ERROR in valid at time %t : Expected '%h' Actual '%h'", $time, valid_ref, valid);
        end
      end
    end

  assign testFailure = valid_testFailure | (end_rsvd_testFailure | (DataOut_testFailure | start_testFailure));



  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // Source_tb

