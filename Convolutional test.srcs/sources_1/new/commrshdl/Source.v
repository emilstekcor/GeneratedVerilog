// -------------------------------------------------------------
// 
// File Name: C:\Users\kyle\Desktop\Convolutional test\Convolutional test.srcs\sources_1\new\commrshdl\Source.v
// Created: 2024-04-11 05:14:43
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 42
// Target subsystem base rate: 42
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// (no clock)    0
// ce_out        42
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// DataOut                       (no clock)    inf
// start                         ce_out        42
// end_rsvd                      ce_out        42
// valid                         ce_out        42
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Source
// Source Path: commrshdl/Source
// Hierarchy Level: 0
// Model version: 9.77
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Source
          (clk,
           reset_x,
           clk_enable,
           ce_out,
           DataOut,
           start,
           end_rsvd,
           valid);


  input   clk;
  input   reset_x;
  input   clk_enable;
  output  ce_out;
  output  signed [3:0] DataOut;  // sfix4_E14
  output  start;
  output  end_rsvd;
  output  valid;


  wire enb;
  wire signed [3:0] TmpGroundAtData_Type_ConversionInport1_out1;  // sfix4_E14
  wire TmpGroundAtHDL_Counter1Inport1_out1;
  wire TmpGroundAtHDL_CounterInport1_out1;
  wire [7:0] count_step;  // uint8
  wire [7:0] count_from;  // uint8
  wire [7:0] count_reset;  // uint8
  reg [7:0] HDL_Counter_out1;  // uint8
  wire [7:0] count;  // uint8
  wire need_to_wrap;
  wire [7:0] count_value;  // uint8
  wire [7:0] count_1;  // uint8
  wire range_hit;
  wire count_hit;
  wire zero_1;
  wire HDL_Counter_out2;
  wire [7:0] count_step_1;  // uint8
  wire [7:0] count_from_1;  // uint8
  wire [7:0] count_reset_1;  // uint8
  reg [7:0] HDL_Counter1_out1;  // uint8
  wire [7:0] count_2;  // uint8
  wire need_to_wrap_1;
  wire [7:0] count_value_1;  // uint8
  wire [7:0] count_3;  // uint8
  wire [7:0] count_4;  // uint8
  wire range_hit_1;
  wire count_hit_1;
  wire zero_2;
  wire HDL_Counter1_out2;
  wire TmpGroundAtHDL_Counter3Inport1_out1;
  wire TmpGroundAtHDL_Counter2Inport1_out1;
  wire [7:0] count_step_2;  // uint8
  wire [7:0] count_from_2;  // uint8
  wire [7:0] count_reset_2;  // uint8
  reg [7:0] HDL_Counter2_out1;  // uint8
  wire [7:0] count_5;  // uint8
  wire need_to_wrap_2;
  wire [7:0] count_value_2;  // uint8
  wire [7:0] count_6;  // uint8
  wire range_hit_2;
  wire count_hit_2;
  wire zero_3;
  wire HDL_Counter2_out2;
  wire [7:0] count_step_3;  // uint8
  wire [7:0] count_from_3;  // uint8
  wire [7:0] count_reset_3;  // uint8
  reg [7:0] HDL_Counter3_out1;  // uint8
  wire [7:0] count_7;  // uint8
  wire need_to_wrap_3;
  wire [7:0] count_value_3;  // uint8
  wire [7:0] count_8;  // uint8
  wire [7:0] count_9;  // uint8
  wire range_hit_3;
  wire count_hit_3;
  wire zero_4;
  wire HDL_Counter3_out2;
  wire TmpGroundAtSet_Reset_Flip_FlopInport1_out1;
  wire TmpGroundAtSet_Reset_Flip_FlopInport2_out1;
  wire Set_Reset_Flip_Flop_out1;

  // PacketStart
  // PacketEnd
  // DataValid


  assign TmpGroundAtData_Type_ConversionInport1_out1 = 4'sb0000;



  assign DataOut = TmpGroundAtData_Type_ConversionInport1_out1;

  assign TmpGroundAtHDL_Counter1Inport1_out1 = 1'b0;



  assign TmpGroundAtHDL_CounterInport1_out1 = 1'b0;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 32
  assign count_step = 8'b00000001;



  assign count_from = 8'b00000000;



  assign count_reset = 8'b00000000;



  assign enb = clk_enable;

  assign count = HDL_Counter_out1 + count_step;



  assign count_value = (need_to_wrap == 1'b0 ? count :
              count_from);



  assign count_1 = (TmpGroundAtHDL_CounterInport1_out1 == 1'b0 ? count_value :
              count_reset);



  always @(posedge clk)
    begin : HDL_Counter_process
      if (reset_x == 1'b1) begin
        HDL_Counter_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter_out1 <= count_1;
        end
      end
    end



  assign need_to_wrap = HDL_Counter_out1 == 8'b00100000;



  assign range_hit = HDL_Counter_out1 > 8'b11111110;



  assign count_hit = need_to_wrap | range_hit;



  assign zero_1 = 1'b0;



  assign HDL_Counter_out2 = (TmpGroundAtHDL_CounterInport1_out1 == 1'b0 ? count_hit :
              zero_1);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 32
  assign count_step_1 = 8'b00000001;



  assign count_from_1 = 8'b00000000;



  assign count_reset_1 = 8'b00000000;



  assign count_2 = HDL_Counter1_out1 + count_step_1;



  assign count_value_1 = (need_to_wrap_1 == 1'b0 ? count_2 :
              count_from_1);



  assign count_3 = (HDL_Counter_out2 == 1'b0 ? HDL_Counter1_out1 :
              count_value_1);



  assign count_4 = (TmpGroundAtHDL_Counter1Inport1_out1 == 1'b0 ? count_3 :
              count_reset_1);



  always @(posedge clk)
    begin : HDL_Counter1_process
      if (reset_x == 1'b1) begin
        HDL_Counter1_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter1_out1 <= count_4;
        end
      end
    end



  assign need_to_wrap_1 = HDL_Counter1_out1 == 8'b00100000;



  assign range_hit_1 = HDL_Counter1_out1 > 8'b11111110;



  assign count_hit_1 = need_to_wrap_1 | range_hit_1;



  assign zero_2 = 1'b0;



  assign HDL_Counter1_out2 = (TmpGroundAtHDL_Counter1Inport1_out1 == 1'b0 ? count_hit_1 :
              zero_2);



  assign start = HDL_Counter1_out2;

  assign TmpGroundAtHDL_Counter3Inport1_out1 = 1'b0;



  assign TmpGroundAtHDL_Counter2Inport1_out1 = 1'b0;



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 32
  assign count_step_2 = 8'b00000001;



  assign count_from_2 = 8'b00000000;



  assign count_reset_2 = 8'b00000000;



  assign count_5 = HDL_Counter2_out1 + count_step_2;



  assign count_value_2 = (need_to_wrap_2 == 1'b0 ? count_5 :
              count_from_2);



  assign count_6 = (TmpGroundAtHDL_Counter2Inport1_out1 == 1'b0 ? count_value_2 :
              count_reset_2);



  always @(posedge clk)
    begin : HDL_Counter2_process
      if (reset_x == 1'b1) begin
        HDL_Counter2_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter2_out1 <= count_6;
        end
      end
    end



  assign need_to_wrap_2 = HDL_Counter2_out1 == 8'b00100000;



  assign range_hit_2 = HDL_Counter2_out1 > 8'b11111110;



  assign count_hit_2 = need_to_wrap_2 | range_hit_2;



  assign zero_3 = 1'b0;



  assign HDL_Counter2_out2 = (TmpGroundAtHDL_Counter2Inport1_out1 == 1'b0 ? count_hit_2 :
              zero_3);



  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 32
  assign count_step_3 = 8'b00000001;



  assign count_from_3 = 8'b00000000;



  assign count_reset_3 = 8'b00000000;



  assign count_7 = HDL_Counter3_out1 + count_step_3;



  assign count_value_3 = (need_to_wrap_3 == 1'b0 ? count_7 :
              count_from_3);



  assign count_8 = (HDL_Counter2_out2 == 1'b0 ? HDL_Counter3_out1 :
              count_value_3);



  assign count_9 = (TmpGroundAtHDL_Counter3Inport1_out1 == 1'b0 ? count_8 :
              count_reset_3);



  always @(posedge clk)
    begin : HDL_Counter3_process
      if (reset_x == 1'b1) begin
        HDL_Counter3_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          HDL_Counter3_out1 <= count_9;
        end
      end
    end



  assign need_to_wrap_3 = HDL_Counter3_out1 == 8'b00100000;



  assign range_hit_3 = HDL_Counter3_out1 > 8'b11111110;



  assign count_hit_3 = need_to_wrap_3 | range_hit_3;



  assign zero_4 = 1'b0;



  assign HDL_Counter3_out2 = (TmpGroundAtHDL_Counter3Inport1_out1 == 1'b0 ? count_hit_3 :
              zero_4);



  assign end_rsvd = HDL_Counter3_out2;

  assign TmpGroundAtSet_Reset_Flip_FlopInport1_out1 = 1'b0;



  assign TmpGroundAtSet_Reset_Flip_FlopInport2_out1 = 1'b0;



  Set_Reset_Flip_Flop u_Set_Reset_Flip_Flop (.clk(clk),
                                             .reset_x(reset_x),
                                             .enb(clk_enable),
                                             .Set(TmpGroundAtSet_Reset_Flip_FlopInport1_out1),
                                             .Reset(TmpGroundAtSet_Reset_Flip_FlopInport2_out1),
                                             .Q(Set_Reset_Flip_Flop_out1)
                                             );

  assign valid = Set_Reset_Flip_Flop_out1;

  assign ce_out = clk_enable;

endmodule  // Source

