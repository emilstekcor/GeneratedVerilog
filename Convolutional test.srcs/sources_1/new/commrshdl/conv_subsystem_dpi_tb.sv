// -------------------------------------------------------------
// 
// File Name: C:\Users\kyle\Desktop\Convolutional test\Convolutional test.srcs\sources_1\new\commrshdl\conv_subsystem_dpi_tb.sv
// Created: 2024-04-11 04:39:47
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: conv_subsystem_dpi_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module conv_subsystem_dpi_tb;

  logic clk;
  logic reset_x;
  logic enb;
  logic const_true;
  logic snkDone;
  logic const_false;
  logic dutEnable;
  logic signed [7:0] dpi_1;  /* sfix8_E14 */
  logic [3:0] dpi_1_temp;  /* ufix4 */
  logic signed [3:0] enc_data_in;  /* sfix4_E14 */
  logic [7:0] dpi_2;  /* ufix8 */
  logic dpi_2_temp;
  logic enc_start_in;
  logic [7:0] dpi_3;  /* ufix8 */
  logic dpi_3_temp;
  logic enc_end_in;
  logic [7:0] dpi_4;  /* ufix8 */
  logic dpi_4_temp;
  logic enc_valid_in;
  logic dec_data_out;
  logic dec_start_out;
  logic dec_end_out;
  logic dec_valid_out;
  logic ce_out;
  logic dpiReset;
  logic dpiEnable;
  logic dpiEnbDelay;
  logic [7:0] dpi_5;  /* ufix8 */
  logic [7:0] dpi_6;  /* ufix8 */
  logic [7:0] dpi_7;  /* ufix8 */
  logic [7:0] dpi_8;  /* ufix8 */
  logic dpi_5_temp;
  logic dec_data_out_ref;
  logic dec_data_out_testFailure;
  logic dpi_6_temp;
  logic dec_start_out_ref;
  logic dec_start_out_testFailure;
  logic dpi_7_temp;
  logic dec_end_out_ref;
  logic dec_end_out_testFailure;
  logic dpi_8_temp;
  logic dec_valid_out_ref;
  logic dec_valid_out_testFailure;
  logic isTestFailed;

  function isFloatDoubleEpsVecEqual;
  input [63:0] x [];
  input [63:0] y [];
  input real eps;

  logic retVal;
  retVal = 1;
  for(int j=0; j < x.size; j++) begin
    retVal = retVal && isFloatDoubleEpsEqual(x[j],y[j],eps);
  end
  return retVal;
endfunction
function isFloatDoubleEps2DMacEqual;
input [63:0] x [][];
input [63:0] y [][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j])
  retVal = retVal && isFloatDoubleEpsEqual(x[i][j],y[i][j],eps);
  return retVal;
endfunction
function isFloatDoubleEps3DMacEqual;
input [63:0] x [][][];
input [63:0] y [][][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j,k])
  retVal = retVal && isFloatDoubleEpsEqual(x[i][j][k],y[i][j][k],eps);
  return retVal;
endfunction
function isFloatSingleEpsVecEqual;
input [31:0] x [];
input [31:0] y [];
input real eps;

logic retVal;
retVal = 1;
for(int j=0; j < x.size; j++) begin
  retVal = retVal && isFloatSingleEpsEqual(x[j],y[j],eps);
end
return retVal;
endfunction
function isFloatSingleEps2DMacEqual;
input [31:0] x [][];
input [31:0] y [][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j])
  retVal = retVal && isFloatSingleEpsEqual(x[i][j],y[i][j],eps);
  return retVal;
endfunction
function isFloatSingleEps3DMacEqual;
input [31:0] x [][][];
input [31:0] y [][][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j,k])
  retVal = retVal && isFloatSingleEpsEqual(x[i][j][k],y[i][j][k],eps);
  return retVal;
endfunction
function isFloatHalfEpsVecEqual;
input [15:0] x [];
input [15:0] y [];
input real eps;

logic retVal;
retVal = 1;
for(int j=0; j < x.size; j++) begin
  retVal = retVal && isFloatHalfEpsEqual(x[j],y[j],eps);
end
return retVal;
endfunction
function isFloatHalfEps2DMacEqual;
input [15:0] x [][];
input [15:0] y [][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j])
  retVal = retVal && isFloatHalfEpsEqual(x[i][j],y[i][j],eps);
  return retVal;
endfunction
function isFloatHalfEps3DMacEqual;
input [15:0] x [][][];
input [15:0] y [][][];
input real eps;

logic retVal;
retVal = 1;
foreach(x[i,j,k])
  retVal = retVal && isFloatHalfEpsEqual(x[i][j][k],y[i][j][k],eps);
  return retVal;
endfunction
function real absReal(input real num);
begin
  if (num < 0)
    absReal = -num;
  else
    absReal = num;
end
endfunction

function real floatHalfToReal;
input [15:0] x;
reg [63:0] conv;

begin
  conv[63] = x[15]; // sign 
  if (x[14:10] == 5'b0) // exp 
    conv[62:52] = 11'b0; 
  else
    conv[62:52] = 1023 + (x[14:10] - 15);
  conv[51:42] = x[9:0]; // mantissa 
  conv[41:0] = 42'b0;
  if (((x[14:10] == 5'h1F) && (x[9:0] != 10'h0))) // check for NaN 
  begin
    conv[63] = 1'b0;
    conv[62:52] = 11'h7FF;
    conv[51:0] = 52'h0;
  end
  floatHalfToReal = $bitstoreal(conv);
end
endfunction

function real floatSingleToReal;
input [31:0] x;
reg [63:0] conv;

begin
  conv[63] = x[31]; // sign 
  if (x[30:23] == 8'b0) // exp 
    conv[62:52] = 11'b0; 
  else
    conv[62:52] = 1023 + (x[30:23] - 127);
  conv[51:29] = x[22:0]; // mantissa 
  conv[28:0] = 29'b0;
  if (((x[30:23] == 8'hFF) && (x[22:0] != 23'h0))) // check for NaN 
  begin
    conv[63] = 1'b0;
    conv[62:52] = 11'h7FF;
    conv[51:0] = 52'h0;
  end
  floatSingleToReal = $bitstoreal(conv);
end
endfunction

function real floatDoubleToReal;
input [63:0] x;
reg [63:0] conv;

begin
  conv[63:0] = x[63:0]; 
  if (((x[62:52] == 11'h7FF) && (x[51:0] != 52'h0))) // check for NaN 
  begin
    conv[63] = 1'b0;
    conv[62:52] = 11'h7FF;
    conv[51:0] = 52'h0;
  end
  floatDoubleToReal = $bitstoreal(conv);
end
endfunction

function isFloatEpsEqual(input real a, input real b, input real eps);
real absdiff;

begin
  absdiff = absReal(a - b);
  if (absdiff < eps) // absolute error check 
    isFloatEpsEqual = 1;
  else if (a == b) // check infinities 
    isFloatEpsEqual = 1; 
  else if (a*b == 0.0) // either is zero 
    isFloatEpsEqual = (absdiff < eps);
  else if (absReal(a) < absReal(b)) // relative error check
    isFloatEpsEqual = absdiff/absReal(b) < eps;
  else
    isFloatEpsEqual = absdiff/absReal(a) < eps;
end
endfunction
function isFloatHalfEpsEqual;
input [15:0] x;
input [15:0] y;
input real eps;
real a, b;
real absdiff;

begin
  a = floatHalfToReal(x);
  b = floatHalfToReal(y);
  isFloatHalfEpsEqual = isFloatEpsEqual(a, b, eps);
end
endfunction
function isFloatSingleEpsEqual;
input [31:0] x;
input [31:0] y;
input real eps;
real a, b;
real absdiff;

begin
  a = floatSingleToReal(x);
  b = floatSingleToReal(y);
  isFloatSingleEpsEqual = isFloatEpsEqual(a, b, eps);
end
endfunction
function isFloatDoubleEpsEqual;
input [63:0] x;
input [63:0] y;
input real eps;
real a, b;
real absdiff;

begin
  a = floatDoubleToReal(x);
  b = floatDoubleToReal(y);
  isFloatDoubleEpsEqual = isFloatEpsEqual(a, b, eps);
end
endfunction

  assign const_true = 1'b1;



assign #21020 snkDone = const_true;

always 
  begin : clk_gen
    clk <= 1'b1;
    # (5);
    clk <= 1'b0;
    # (5);
    if (snkDone == 1'b1) begin
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      $stop;
    end
  end

initial
  begin : reset_x_gen
    reset_x <= 1'b1;
    # (30);
    @ (posedge clk)
    # (2);
    reset_x <= 1'b0;
  end

  assign const_false = 1'b0;



  assign enb = (reset_x == 1'b0 ? const_true :
              const_false);



// Delay inside enable generation: register depth 
always @(posedge clk)
  begin : dut_enable_delay
    if (reset_x) begin
      dutEnable <= 0;
    end
    else begin
      dutEnable <= enb;
    end
  end

  assign dpi_1_temp = dpi_1[3:0];



  assign enc_data_in = dpi_1_temp;



  assign dpi_2_temp = dpi_2[0];



assign enc_start_in = dpi_2_temp;

  assign dpi_3_temp = dpi_3[0];



assign enc_end_in = dpi_3_temp;

  assign dpi_4_temp = dpi_4[0];



assign enc_valid_in = dpi_4_temp;

conv_subsystem u_conv_subsystem (.enc_data_in(enc_data_in),  /* sfix4_E14 */
                                 .enc_start_in(enc_start_in),
                                 .enc_end_in(enc_end_in),
                                 .enc_valid_in(enc_valid_in),
                                 .clk(clk),
                                 .reset_x(reset_x),
                                 .clk_enable(dutEnable),
                                 .dec_data_out(dec_data_out),
                                 .dec_start_out(dec_start_out),
                                 .dec_end_out(dec_end_out),
                                 .dec_valid_out(dec_valid_out),
                                 .ce_out(ce_out)
                                 );

initial
  begin : dpiReset_gen
    dpiReset <= 1'b1;
    # (20);
    @ (posedge clk)
    # (2);
    dpiReset <= 1'b0;
  end

  assign dpiEnable = (dpiReset == 1'b0 ? const_true :
              const_false);



// Delay inside enable generation: register depth 
always @(posedge clk)
  begin : dut_enable_delay_1
    if (dpiReset) begin
      dpiEnbDelay <= 0;
    end
    else begin
      dpiEnbDelay <= dpiEnable;
    end
  end

gm_commrshdl_ref_dpi #(.loop_factor(1),
                       .overclocking_factor(1)
                       )
                     u_gm_commrshdl_ref_dpi (.clk(clk),
                                             .reset(dpiReset),
                                             .clk_enable(dpiEnbDelay),
                                             .dpi_1(dpi_1),  /* sfix8_E14 */
                                             .dpi_2(dpi_2),  /* ufix8 */
                                             .dpi_3(dpi_3),  /* ufix8 */
                                             .dpi_4(dpi_4),  /* ufix8 */
                                             .dpi_5(dpi_5),  /* ufix8 */
                                             .dpi_6(dpi_6),  /* ufix8 */
                                             .dpi_7(dpi_7),  /* ufix8 */
                                             .dpi_8(dpi_8)  /* ufix8 */
                                             );

  assign dpi_5_temp = dpi_5[0];



assign dec_data_out_ref = dpi_5_temp;

always @(posedge clk)
  begin : dec_data_out_checker
    if (reset_x == 1'b1) begin
      dec_data_out_testFailure <= 1'b0;
    end
    else begin
      if (dutEnable == 1'b1 && dec_data_out !== dec_data_out_ref) begin
        dec_data_out_testFailure <= 1'b1;
        $display("ERROR in dec_data_out at time %t : Expected '%h' Actual '%h'", $time, dec_data_out_ref, dec_data_out);
      end
    end
  end

  assign dpi_6_temp = dpi_6[0];



assign dec_start_out_ref = dpi_6_temp;

always @(posedge clk)
  begin : dec_start_out_checker
    if (reset_x == 1'b1) begin
      dec_start_out_testFailure <= 1'b0;
    end
    else begin
      if (dutEnable == 1'b1 && dec_start_out !== dec_start_out_ref) begin
        dec_start_out_testFailure <= 1'b1;
        $display("ERROR in dec_start_out at time %t : Expected '%h' Actual '%h'", $time, dec_start_out_ref, dec_start_out);
      end
    end
  end

  assign dpi_7_temp = dpi_7[0];



assign dec_end_out_ref = dpi_7_temp;

always @(posedge clk)
  begin : dec_end_out_checker
    if (reset_x == 1'b1) begin
      dec_end_out_testFailure <= 1'b0;
    end
    else begin
      if (dutEnable == 1'b1 && dec_end_out !== dec_end_out_ref) begin
        dec_end_out_testFailure <= 1'b1;
        $display("ERROR in dec_end_out at time %t : Expected '%h' Actual '%h'", $time, dec_end_out_ref, dec_end_out);
      end
    end
  end

  assign dpi_8_temp = dpi_8[0];



assign dec_valid_out_ref = dpi_8_temp;

always @(posedge clk)
  begin : dec_valid_out_checker
    if (reset_x == 1'b1) begin
      dec_valid_out_testFailure <= 1'b0;
    end
    else begin
      if (dutEnable == 1'b1 && dec_valid_out !== dec_valid_out_ref) begin
        dec_valid_out_testFailure <= 1'b1;
        $display("ERROR in dec_valid_out at time %t : Expected '%h' Actual '%h'", $time, dec_valid_out_ref, dec_valid_out);
      end
    end
  end

  assign isTestFailed = dec_valid_out_testFailure | (dec_end_out_testFailure | (dec_data_out_testFailure | dec_start_out_testFailure));



always @(posedge clk)
  begin : completed_msg
    if (snkDone == 1'b1) begin
      if (isTestFailed == 1'b0) begin
        $display("**************TEST COMPLETED (PASSED)**************");
      end
      else begin
        $display("**************TEST COMPLETED (FAILED)**************");
      end
    end
  end

endmodule  // conv_subsystem_dpi_tb

