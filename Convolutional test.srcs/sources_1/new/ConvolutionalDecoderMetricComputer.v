// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\commrshdl\ConvolutionalDecoderMetricComputer.v
// Created: 2024-04-11 04:03:31
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: ConvolutionalDecoderMetricComputer
// Source Path: 
// Hierarchy Level: 2
// Model version: 9.74
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module ConvolutionalDecoderMetricComputer
          (clk,
           reset_x,
           enb,
           varargout_1_0,
           varargout_1_1,
           varargout_1_2,
           varargout_2,
           varargout_3,
           varargout_4,
           varargout_1_0_1,
           varargout_1_1_1,
           varargout_1_2_1,
           varargout_1_3,
           varargout_1_4,
           varargout_1_5,
           varargout_1_6,
           varargout_1_7,
           varargout_1_8,
           varargout_1_9,
           varargout_1_10,
           varargout_1_11,
           varargout_1_12,
           varargout_1_13,
           varargout_1_14,
           varargout_1_15,
           varargout_1_16,
           varargout_1_17,
           varargout_1_18,
           varargout_1_19,
           varargout_1_20,
           varargout_1_21,
           varargout_1_22,
           varargout_1_23,
           varargout_1_24,
           varargout_1_25,
           varargout_1_26,
           varargout_1_27,
           varargout_1_28,
           varargout_1_29,
           varargout_1_30,
           varargout_1_31,
           varargout_1_32,
           varargout_1_33,
           varargout_1_34,
           varargout_1_35,
           varargout_1_36,
           varargout_1_37,
           varargout_1_38,
           varargout_1_39,
           varargout_1_40,
           varargout_1_41,
           varargout_1_42,
           varargout_1_43,
           varargout_1_44,
           varargout_1_45,
           varargout_1_46,
           varargout_1_47,
           varargout_1_48,
           varargout_1_49,
           varargout_1_50,
           varargout_1_51,
           varargout_1_52,
           varargout_1_53,
           varargout_1_54,
           varargout_1_55,
           varargout_1_56,
           varargout_1_57,
           varargout_1_58,
           varargout_1_59,
           varargout_1_60,
           varargout_1_61,
           varargout_1_62,
           varargout_1_63,
           varargout_2_1,
           varargout_3_1,
           varargout_4_1,
           varargout_5,
           varargout_6);


  input   clk;
  input   reset_x;
  input   enb;
  input   varargout_1_0;  // boolean
  input   varargout_1_1;  // boolean
  input   varargout_1_2;  // boolean
  input   varargout_2;
  input   varargout_3;
  input   varargout_4;
  output  varargout_1_0_1;  // boolean
  output  varargout_1_1_1;  // boolean
  output  varargout_1_2_1;  // boolean
  output  varargout_1_3;  // boolean
  output  varargout_1_4;  // boolean
  output  varargout_1_5;  // boolean
  output  varargout_1_6;  // boolean
  output  varargout_1_7;  // boolean
  output  varargout_1_8;  // boolean
  output  varargout_1_9;  // boolean
  output  varargout_1_10;  // boolean
  output  varargout_1_11;  // boolean
  output  varargout_1_12;  // boolean
  output  varargout_1_13;  // boolean
  output  varargout_1_14;  // boolean
  output  varargout_1_15;  // boolean
  output  varargout_1_16;  // boolean
  output  varargout_1_17;  // boolean
  output  varargout_1_18;  // boolean
  output  varargout_1_19;  // boolean
  output  varargout_1_20;  // boolean
  output  varargout_1_21;  // boolean
  output  varargout_1_22;  // boolean
  output  varargout_1_23;  // boolean
  output  varargout_1_24;  // boolean
  output  varargout_1_25;  // boolean
  output  varargout_1_26;  // boolean
  output  varargout_1_27;  // boolean
  output  varargout_1_28;  // boolean
  output  varargout_1_29;  // boolean
  output  varargout_1_30;  // boolean
  output  varargout_1_31;  // boolean
  output  varargout_1_32;  // boolean
  output  varargout_1_33;  // boolean
  output  varargout_1_34;  // boolean
  output  varargout_1_35;  // boolean
  output  varargout_1_36;  // boolean
  output  varargout_1_37;  // boolean
  output  varargout_1_38;  // boolean
  output  varargout_1_39;  // boolean
  output  varargout_1_40;  // boolean
  output  varargout_1_41;  // boolean
  output  varargout_1_42;  // boolean
  output  varargout_1_43;  // boolean
  output  varargout_1_44;  // boolean
  output  varargout_1_45;  // boolean
  output  varargout_1_46;  // boolean
  output  varargout_1_47;  // boolean
  output  varargout_1_48;  // boolean
  output  varargout_1_49;  // boolean
  output  varargout_1_50;  // boolean
  output  varargout_1_51;  // boolean
  output  varargout_1_52;  // boolean
  output  varargout_1_53;  // boolean
  output  varargout_1_54;  // boolean
  output  varargout_1_55;  // boolean
  output  varargout_1_56;  // boolean
  output  varargout_1_57;  // boolean
  output  varargout_1_58;  // boolean
  output  varargout_1_59;  // boolean
  output  varargout_1_60;  // boolean
  output  varargout_1_61;  // boolean
  output  varargout_1_62;  // boolean
  output  varargout_1_63;  // boolean
  output  varargout_2_1;
  output  varargout_3_1;
  output  varargout_4_1;
  output  [5:0] varargout_5;  // ufix6
  output  varargout_6;


  wire tmp;
  wire resetIn;
  wire resetIn_1;
  wire tmp_1;
  wire signed [31:0] tmp_2;  // int32
  wire signed [31:0] tmp_3;  // int32
  wire signed [31:0] tmp_4;  // int32
  wire signed [31:0] tmp_5;  // int32
  reg  [1:0] obj_metricComputer_validInPipe;  // boolean [2]
  wire tmp_6;
  reg  [1:0] obj_metricComputer_validInPipe_1;  // boolean [2]
  reg  [1:0] tmp_7;  // boolean [2]
  wire tmp_8;
  wire [2:0] branchMetrics [0:7];  // ufix3 [8]
  wire [2:0] branchMetrics_1 [0:7];  // ufix3 [8]
  wire [2:0] branchMetrics_2 [0:7];  // ufix3 [8]
  wire [2:0] tmp_9;  // ufix3
  wire [2:0] dataIn;  // ufix1 [3]
  wire [2:0] varargout_1;  // boolean [3]
  reg  [2:0] obj_metricComputer_dataInReg;  // ufix1 [3]
  wire [2:0] obj_metricComputer_dataInReg_1;  // ufix1 [3]
  wire [2:0] dataIn_1;  // ufix1 [3]
  reg [2:0] branchMetrics_3 [0:7];  // ufix3 [8]
  wire [2:0] obj_metricComputer_branchMetrics [0:7];  // ufix3 [8]
  wire [2:0] obj_metricComputer_branchMetrics_1 [0:7];  // ufix3 [8]
  reg [2:0] obj_metricComputer_branchMetrics_reg_reg [0:7];  // ufix3 [8]
  wire [2:0] obj_metricComputer_branchMetrics_reg_reg_next [0:7];  // ufix3 [8]
  wire [2:0] branchMetrics_4 [0:7];  // ufix3 [8]
  wire signed [6:0] oldStateMetrics [0:63];  // sfix7 [64]
  wire signed [6:0] tmp_10 [0:63];  // sfix7 [64]
  wire signed [6:0] tmp_11;  // sfix7
  wire signed [6:0] obj_metricComputer_stateMetrics [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_stateMetrics_1 [0:63];  // sfix7 [64]
  reg signed [6:0] tmp_12 [0:63];  // sfix7 [64]
  wire signed [6:0] oldStateMetrics_1 [0:63];  // sfix7 [64]
  reg signed [6:0] obj_metricComputer_stateMetrics_2 [0:63];  // sfix7 [64]
  reg signed [6:0] tmp_13 [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_stateMetrics_3 [0:63];  // sfix7 [64]
  reg signed [6:0] tmp_14 [0:63];  // sfix7 [64]
  reg signed [6:0] obj_metricComputer_stateMetrics_reg_reg [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_stateMetrics_reg_reg_next [0:63];  // sfix7 [64]
  wire signed [6:0] oldStateMetrics_2 [0:63];  // sfix7 [64]
  wire tmp_15;
  wire tmp_16;
  wire [63:0] tmp_17;  // boolean [64]
  wire [63:0] tmp_18;  // boolean [64]
  reg  [63:0] obj_metricComputer_decisions;  // boolean [64]
  reg  [63:0] obj_metricComputer_decisions_1;  // boolean [64]
  wire [63:0] tmp_19;  // boolean [64]
  wire [63:0] obj_metricComputer_decisions_2;  // boolean [64]
  wire [63:0] tmp_20;  // boolean [64]
  wire [63:0] varargout_1_64;  // boolean [64]
  wire [63:0] varargout_1_65;  // boolean [64]
  wire signed [31:0] tmp_21;  // int32
  wire signed [31:0] tmp_22;  // int32
  wire signed [31:0] tmp_23;  // int32
  wire signed [31:0] tmp_24;  // int32
  reg  [1:0] obj_metricComputer_startInPipe;  // boolean [2]
  wire tmp_25;
  reg  [1:0] obj_metricComputer_startInPipe_1;  // boolean [2]
  reg  [1:0] tmp_26;  // boolean [2]
  wire tmp_27;
  reg  obj_metricComputer_startOutPipe;
  wire signed [31:0] tmp_28;  // int32
  wire signed [31:0] tmp_29;  // int32
  wire signed [31:0] tmp_30;  // int32
  wire signed [31:0] tmp_31;  // int32
  reg  [1:0] obj_metricComputer_endInPipe;  // boolean [2]
  wire tmp_32;
  reg  [1:0] obj_metricComputer_endInPipe_1;  // boolean [2]
  reg  [1:0] tmp_33;  // boolean [2]
  wire tmp_34;
  reg  obj_metricComputer_endOutPipe;
  reg  obj_metricComputer_validOutPipe;
  wire signed [6:0] stateMetricsOut [0:63];  // sfix7 [64]
  wire signed [6:0] stateMetricsOut_1 [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_maxMetrics [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_maxMetrics_1 [0:63];  // sfix7 [64]
  reg signed [6:0] obj_metricComputer_maxMetrics_2 [0:63];  // sfix7 [64]
  reg signed [6:0] tmp_35 [0:63];  // sfix7 [64]
  reg signed [6:0] obj_metricComputer_maxMetrics_reg_reg [0:63];  // sfix7 [64]
  wire signed [6:0] obj_metricComputer_maxMetrics_reg_reg_next [0:63];  // sfix7 [64]
  wire [5:0] obj_metricComputer_maxStates [0:63];  // ufix6 [64]
  wire [5:0] obj_metricComputer_maxStates_1 [0:63];  // ufix6 [64]
  reg [5:0] obj_metricComputer_maxStates_2 [0:63];  // ufix6 [64]
  reg [5:0] tmp_36 [0:63];  // ufix6 [64]
  reg [5:0] obj_metricComputer_maxStates_reg_reg [0:63];  // ufix6 [64]
  wire [5:0] obj_metricComputer_maxStates_reg_reg_next [0:63];  // ufix6 [64]
  wire signed [31:0] tmp_37;  // int32
  wire signed [31:0] tmp_38;  // int32
  wire signed [31:0] tmp_39;  // int32
  wire signed [31:0] tmp_40;  // int32
  reg  [1:0] obj_metricComputer_resetInPipe;  // boolean [2]
  wire tmp_41;
  reg  [1:0] obj_metricComputer_resetInPipe_1;  // boolean [2]
  reg  [1:0] tmp_42;  // boolean [2]
  wire resetIn_2;
  wire [6:0] endOut;  // boolean [7]
  reg  [6:0] endOut_1;  // boolean [7]
  wire tmp_43;
  reg  [6:0] obj_metricComputer_maxValidPipe;  // boolean [7]
  wire [6:0] obj_metricComputer_maxValidPipe_1;  // boolean [7]
  reg  [6:0] endOut_2;  // boolean [7]
  wire [6:0] obj_metricComputer_maxValidPipe_2;  // boolean [7]
  wire [6:0] tmp_44;  // boolean [7]
  reg [2:0] p17_branchMetrics [0:7];  // ufix3 [8]
  reg signed [31:0] p17_kb;  // int32
  reg signed [31:0] p17_ks;  // int32
  reg  [23:0] p17_t_0;  // boolean [24]
  reg signed [63:0] p17_add_cast [0:2];  // sfix64 [3]
  reg [3:0] p17_add_temp [0:2];  // ufix4 [3]
  reg [4:0] p17_sub_temp [0:2];  // ufix5 [3]
  reg [2:0] p17_t_1 [0:7] [0:2];  // ufix3 [8x3]
  reg [3:0] p17_t_2 [0:7] [0:2];  // ufix4 [8x3]
  reg [4:0] p17_t_3 [0:7] [0:2];  // ufix5 [8x3]
  reg [4:0] p17_t_4 [0:7] [0:2];  // ufix5 [8x3]
  reg signed [31:0] obj_metricComputer_branchMetrics_reg_t_0_1;  // int32
  reg signed [31:0] obj_metricComputer_branchMetrics_reg_t_1;  // int32
  reg signed [31:0] p1_m;  // int32
  reg signed [7:0] p1_t_0 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_1 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_2 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_3 [0:63];  // int8 [64]
  reg signed [6:0] p1_newStateMetricA;  // sfix7
  reg signed [6:0] p1_newStateMetricB;  // sfix7
  reg signed [6:0] p1_t_4;  // sfix7
  reg signed [8:0] p1_add_temp [0:63];  // sfix9 [64]
  reg signed [8:0] p1_add_temp_0 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_5 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_6 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_7 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_8 [0:63];  // sfix9 [64]
  reg signed [31:0] p1_t_0_0;  // int32
  reg signed [31:0] p1_t_11;  // int32
  reg signed [31:0] p44_t_0_0;  // int32
  reg signed [31:0] p44_t_1;  // int32
  reg signed [31:0] p39_t_0_0;  // int32
  reg signed [31:0] p39_t_1;  // int32
  reg signed [31:0] obj_metricComputer_stateMetrics_reg_t_0_1;  // int32
  reg signed [31:0] obj_metricComputer_stateMetrics_reg_t_1;  // int32
  reg signed [31:0] p1_m1;  // int32
  reg signed [7:0] p1_t_01 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_12 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_21 [0:63];  // int8 [64]
  reg signed [7:0] p1_t_31 [0:63];  // int8 [64]
  reg  p1_t_41;
  reg signed [6:0] p1_sub_cast [0:63];  // sfix7 [64]
  reg signed [6:0] p1_sub_cast_0 [0:63];  // sfix7 [64]
  reg signed [8:0] p1_t_51 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_61 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_add_temp1 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_71 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_t_81 [0:63];  // sfix9 [64]
  reg signed [8:0] p1_add_temp_01 [0:63];  // sfix9 [64]
  reg signed [31:0] p1_k;  // int32
  reg signed [6:0] p1_obj_metricComputer_maxMetrics [0:63];  // sfix7 [64]
  reg signed [31:0] p1_t_02;  // int32
  reg signed [31:0] p1_t_13;  // int32
  reg signed [63:0] p1_cast [0:31];  // sfix64 [32]
  reg signed [63:0] p1_add_cast [0:31];  // sfix64 [32]
  reg signed [63:0] p1_add_cast_0 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_cast_0 [0:31];  // sfix64 [32]
  reg signed [31:0] p25_t_0_0;  // int32
  reg signed [31:0] p25_t_1;  // int32
  reg signed [31:0] obj_metricComputer_maxMetrics_reg_t_0_1;  // int32
  reg signed [31:0] obj_metricComputer_maxMetrics_reg_t_1;  // int32
  reg signed [31:0] p1_k1;  // int32
  reg signed [6:0] p1_obj_metricComputer_maxMetrics1 [0:63];  // sfix7 [64]
  reg [5:0] p1_obj_metricComputer_maxStates [0:63];  // ufix6 [64]
  reg signed [31:0] p1_t_03;  // int32
  reg signed [31:0] p1_t_14;  // int32
  reg signed [63:0] p1_cast1 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_add_cast1 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_add_cast_01 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_cast_01 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_add_cast_1 [0:31];  // sfix64 [32]
  reg signed [63:0] p1_cast_1 [0:31];  // sfix64 [32]
  reg signed [31:0] p30_t_0_0;  // int32
  reg signed [31:0] p30_t_1;  // int32
  reg signed [31:0] obj_metricComputer_maxStates_reg_t_0_1;  // int32
  reg signed [31:0] obj_metricComputer_maxStates_reg_t_1;  // int32


  assign tmp = varargout_2 && varargout_4;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp54
  assign resetIn = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp54
  assign resetIn_1 = 1'b1;



  assign tmp_1 = (tmp == 1'b0 ? resetIn :
              resetIn_1);



  assign tmp_2 = 32'sd0;



  assign tmp_3 = 32'sd0;



  assign tmp_4 = 32'sd0;



  assign tmp_5 = 32'sd0;



  assign tmp_6 = obj_metricComputer_validInPipe[tmp_4 + tmp_5];



  always @* begin
    obj_metricComputer_validInPipe_1 = obj_metricComputer_validInPipe;
    obj_metricComputer_validInPipe_1[tmp_2 + tmp_3] = varargout_4;
  end



  always @* begin
    tmp_7 = obj_metricComputer_validInPipe_1;
    tmp_7[1] = tmp_6;
  end



  always @(posedge clk)
    begin : obj_metricComputer_validInPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_validInPipe <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_validInPipe <= tmp_7;
        end
      end
    end



  assign tmp_8 = obj_metricComputer_validInPipe[1];




  genvar t_014;
  generate
    for(t_014 = 32'sd0; t_014 <= 32'sd7; t_014 = t_014 + 32'sd1) begin:branchMetrics_gen
      assign branchMetrics[t_014] = 3'b000;
    end
  endgenerate





  genvar t_015;
  generate
    for(t_015 = 32'sd0; t_015 <= 32'sd7; t_015 = t_015 + 32'sd1) begin:branchMetrics_1_gen
      assign branchMetrics_1[t_015] = 3'b000;
    end
  endgenerate





  genvar t_021;
  generate
    for(t_021 = 32'sd0; t_021 <= 32'sd7; t_021 = t_021 + 32'sd1) begin:branchMetrics_2_gen
      assign branchMetrics_2[t_021] = 3'b000;
    end
  endgenerate




  assign tmp_9 = 3'b000;



  assign dataIn = {3{1'b0}};



  assign varargout_1[0] = varargout_1_0;
  assign varargout_1[1] = varargout_1_1;
  assign varargout_1[2] = varargout_1_2;


  genvar t_031;
  generate
    for(t_031 = 32'sd0; t_031 <= 32'sd2; t_031 = t_031 + 32'sd1) begin:obj_metricComputer_dataInReg_1_gen
      assign obj_metricComputer_dataInReg_1[t_031] = varargout_1[t_031];
    end
  endgenerate




  always @(posedge clk)
    begin : obj_metricComputer_dataInReg_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_dataInReg <= {3{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_dataInReg <= obj_metricComputer_dataInReg_1;
        end
      end
    end



  assign dataIn_1 = obj_metricComputer_dataInReg;



  always @* begin
    p17_t_0[0] = 1'b0;
    p17_t_0[1] = 1'b0;
    p17_t_0[2] = 1'b0;
    p17_t_0[3] = 1'b0;
    p17_t_0[4] = 1'b1;
    p17_t_0[5] = 1'b1;
    p17_t_0[6] = 1'b1;
    p17_t_0[7] = 1'b1;
    p17_t_0[8] = 1'b0;
    p17_t_0[9] = 1'b0;
    p17_t_0[10] = 1'b1;
    p17_t_0[11] = 1'b1;
    p17_t_0[12] = 1'b0;
    p17_t_0[13] = 1'b0;
    p17_t_0[14] = 1'b1;
    p17_t_0[15] = 1'b1;
    p17_t_0[16] = 1'b0;
    p17_t_0[17] = 1'b1;
    p17_t_0[18] = 1'b0;
    p17_t_0[19] = 1'b1;
    p17_t_0[20] = 1'b0;
    p17_t_0[21] = 1'b1;
    p17_t_0[22] = 1'b0;
    p17_t_0[23] = 1'b1;

    for(p17_ks = 32'sd0; p17_ks <= 32'sd7; p17_ks = p17_ks + 32'sd1) begin
      p17_branchMetrics[p17_ks] = tmp_9;

      for(p17_kb = 32'sd0; p17_kb <= 32'sd2; p17_kb = p17_kb + 32'sd1) begin
        p17_add_cast[p17_kb] = {{29{p17_kb[31]}}, {p17_kb, 3'b000}};
        if (p17_t_0[p17_ks + p17_add_cast[p17_kb]]) begin
          p17_t_1[p17_ks][p17_kb] = {2'b0, dataIn_1[p17_kb]};
          p17_branchMetrics[p17_ks] = p17_branchMetrics[p17_ks] + p17_t_1[p17_ks][p17_kb];
        end
        else begin
          p17_t_2[p17_ks][p17_kb] = {1'b0, p17_branchMetrics[p17_ks]};
          p17_add_temp[p17_kb] = p17_t_2[p17_ks][p17_kb] + 4'b0001;
          p17_t_3[p17_ks][p17_kb] = {1'b0, p17_add_temp[p17_kb]};
          p17_t_4[p17_ks][p17_kb] = {4'b0, dataIn_1[p17_kb]};
          p17_sub_temp[p17_kb] = p17_t_3[p17_ks][p17_kb] - p17_t_4[p17_ks][p17_kb];
          p17_branchMetrics[p17_ks] = p17_sub_temp[p17_kb][2:0];
        end
      end

      branchMetrics_3[p17_ks] = p17_branchMetrics[p17_ks];
    end

  end




  genvar t_041;
  generate
    for(t_041 = 32'sd0; t_041 <= 32'sd7; t_041 = t_041 + 32'sd1) begin:obj_metricComputer_branchMetrics_1_gen
      assign obj_metricComputer_branchMetrics_1[t_041] = branchMetrics_3[t_041];
    end
  endgenerate




  always @(posedge clk)
    begin : obj_metricComputer_branchMetrics_reg_process
      if (reset_x == 1'b1) begin
        for(obj_metricComputer_branchMetrics_reg_t_1 = 32'sd0; obj_metricComputer_branchMetrics_reg_t_1 <= 32'sd7; obj_metricComputer_branchMetrics_reg_t_1 = obj_metricComputer_branchMetrics_reg_t_1 + 32'sd1) begin
          obj_metricComputer_branchMetrics_reg_reg[obj_metricComputer_branchMetrics_reg_t_1] <= 3'b000;
        end
      end
      else begin
        if (enb) begin
          for(obj_metricComputer_branchMetrics_reg_t_0_1 = 32'sd0; obj_metricComputer_branchMetrics_reg_t_0_1 <= 32'sd7; obj_metricComputer_branchMetrics_reg_t_0_1 = obj_metricComputer_branchMetrics_reg_t_0_1 + 32'sd1) begin
            obj_metricComputer_branchMetrics_reg_reg[obj_metricComputer_branchMetrics_reg_t_0_1] <= obj_metricComputer_branchMetrics_reg_reg_next[obj_metricComputer_branchMetrics_reg_t_0_1];
          end
        end
      end
    end


  genvar t_0_04;
  generate
    for(t_0_04 = 32'sd0; t_0_04 <= 32'sd7; t_0_04 = t_0_04 + 32'sd1) begin:obj_metricComputer_branchMetrics_reg_reg_next_gen
      assign obj_metricComputer_branchMetrics[t_0_04] = obj_metricComputer_branchMetrics_reg_reg[t_0_04];
      assign obj_metricComputer_branchMetrics_reg_reg_next[t_0_04] = obj_metricComputer_branchMetrics_1[t_0_04];
    end
  endgenerate





  genvar t_051;
  generate
    for(t_051 = 32'sd0; t_051 <= 32'sd7; t_051 = t_051 + 32'sd1) begin:branchMetrics_4_gen
      assign branchMetrics_4[t_051] = obj_metricComputer_branchMetrics[t_051];
    end
  endgenerate





  genvar t_061;
  generate
    for(t_061 = 32'sd0; t_061 <= 32'sd63; t_061 = t_061 + 32'sd1) begin:oldStateMetrics_gen
      assign oldStateMetrics[t_061] = 7'sb0000000;
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl

  genvar t_071;
  generate
    for(t_071 = 32'sd0; t_071 <= 32'sd63; t_071 = t_071 + 32'sd1) begin:tmp_10_gen
      assign tmp_10[t_071] = 7'sb0000000;
    end
  endgenerate




  assign tmp_11 = 7'sb0000000;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp39

  genvar t_081;
  generate
    for(t_081 = 32'sd0; t_081 <= 32'sd63; t_081 = t_081 + 32'sd1) begin:obj_metricComputer_stateMetrics_1_gen
      assign obj_metricComputer_stateMetrics_1[t_081] = tmp_11;
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp44_trueregionp1

  genvar t_091;
  generate
    for(t_091 = 32'sd0; t_091 <= 32'sd63; t_091 = t_091 + 32'sd1) begin:oldStateMetrics_1_gen
      assign oldStateMetrics_1[t_091] = obj_metricComputer_stateMetrics[t_091];
    end
  endgenerate




  always @* begin
    p1_t_0[0] = 8'sd0;
    p1_t_0[1] = 8'sd2;
    p1_t_0[2] = 8'sd4;
    p1_t_0[3] = 8'sd6;
    p1_t_0[4] = 8'sd8;
    p1_t_0[5] = 8'sd10;
    p1_t_0[6] = 8'sd12;
    p1_t_0[7] = 8'sd14;
    p1_t_0[8] = 8'sd16;
    p1_t_0[9] = 8'sd18;
    p1_t_0[10] = 8'sd20;
    p1_t_0[11] = 8'sd22;
    p1_t_0[12] = 8'sd24;
    p1_t_0[13] = 8'sd26;
    p1_t_0[14] = 8'sd28;
    p1_t_0[15] = 8'sd30;
    p1_t_0[16] = 8'sd32;
    p1_t_0[17] = 8'sd34;
    p1_t_0[18] = 8'sd36;
    p1_t_0[19] = 8'sd38;
    p1_t_0[20] = 8'sd40;
    p1_t_0[21] = 8'sd42;
    p1_t_0[22] = 8'sd44;
    p1_t_0[23] = 8'sd46;
    p1_t_0[24] = 8'sd48;
    p1_t_0[25] = 8'sd50;
    p1_t_0[26] = 8'sd52;
    p1_t_0[27] = 8'sd54;
    p1_t_0[28] = 8'sd56;
    p1_t_0[29] = 8'sd58;
    p1_t_0[30] = 8'sd60;
    p1_t_0[31] = 8'sd62;
    p1_t_0[32] = 8'sd0;
    p1_t_0[33] = 8'sd2;
    p1_t_0[34] = 8'sd4;
    p1_t_0[35] = 8'sd6;
    p1_t_0[36] = 8'sd8;
    p1_t_0[37] = 8'sd10;
    p1_t_0[38] = 8'sd12;
    p1_t_0[39] = 8'sd14;
    p1_t_0[40] = 8'sd16;
    p1_t_0[41] = 8'sd18;
    p1_t_0[42] = 8'sd20;
    p1_t_0[43] = 8'sd22;
    p1_t_0[44] = 8'sd24;
    p1_t_0[45] = 8'sd26;
    p1_t_0[46] = 8'sd28;
    p1_t_0[47] = 8'sd30;
    p1_t_0[48] = 8'sd32;
    p1_t_0[49] = 8'sd34;
    p1_t_0[50] = 8'sd36;
    p1_t_0[51] = 8'sd38;
    p1_t_0[52] = 8'sd40;
    p1_t_0[53] = 8'sd42;
    p1_t_0[54] = 8'sd44;
    p1_t_0[55] = 8'sd46;
    p1_t_0[56] = 8'sd48;
    p1_t_0[57] = 8'sd50;
    p1_t_0[58] = 8'sd52;
    p1_t_0[59] = 8'sd54;
    p1_t_0[60] = 8'sd56;
    p1_t_0[61] = 8'sd58;
    p1_t_0[62] = 8'sd60;
    p1_t_0[63] = 8'sd62;
    p1_t_1[0] = 8'sd0;
    p1_t_1[1] = 8'sd4;
    p1_t_1[2] = 8'sd1;
    p1_t_1[3] = 8'sd5;
    p1_t_1[4] = 8'sd6;
    p1_t_1[5] = 8'sd2;
    p1_t_1[6] = 8'sd7;
    p1_t_1[7] = 8'sd3;
    p1_t_1[8] = 8'sd7;
    p1_t_1[9] = 8'sd3;
    p1_t_1[10] = 8'sd6;
    p1_t_1[11] = 8'sd2;
    p1_t_1[12] = 8'sd1;
    p1_t_1[13] = 8'sd5;
    p1_t_1[14] = 8'sd0;
    p1_t_1[15] = 8'sd4;
    p1_t_1[16] = 8'sd3;
    p1_t_1[17] = 8'sd7;
    p1_t_1[18] = 8'sd2;
    p1_t_1[19] = 8'sd6;
    p1_t_1[20] = 8'sd5;
    p1_t_1[21] = 8'sd1;
    p1_t_1[22] = 8'sd4;
    p1_t_1[23] = 8'sd0;
    p1_t_1[24] = 8'sd4;
    p1_t_1[25] = 8'sd0;
    p1_t_1[26] = 8'sd5;
    p1_t_1[27] = 8'sd1;
    p1_t_1[28] = 8'sd2;
    p1_t_1[29] = 8'sd6;
    p1_t_1[30] = 8'sd3;
    p1_t_1[31] = 8'sd7;
    p1_t_1[32] = 8'sd7;
    p1_t_1[33] = 8'sd3;
    p1_t_1[34] = 8'sd6;
    p1_t_1[35] = 8'sd2;
    p1_t_1[36] = 8'sd1;
    p1_t_1[37] = 8'sd5;
    p1_t_1[38] = 8'sd0;
    p1_t_1[39] = 8'sd4;
    p1_t_1[40] = 8'sd0;
    p1_t_1[41] = 8'sd4;
    p1_t_1[42] = 8'sd1;
    p1_t_1[43] = 8'sd5;
    p1_t_1[44] = 8'sd6;
    p1_t_1[45] = 8'sd2;
    p1_t_1[46] = 8'sd7;
    p1_t_1[47] = 8'sd3;
    p1_t_1[48] = 8'sd4;
    p1_t_1[49] = 8'sd0;
    p1_t_1[50] = 8'sd5;
    p1_t_1[51] = 8'sd1;
    p1_t_1[52] = 8'sd2;
    p1_t_1[53] = 8'sd6;
    p1_t_1[54] = 8'sd3;
    p1_t_1[55] = 8'sd7;
    p1_t_1[56] = 8'sd3;
    p1_t_1[57] = 8'sd7;
    p1_t_1[58] = 8'sd2;
    p1_t_1[59] = 8'sd6;
    p1_t_1[60] = 8'sd5;
    p1_t_1[61] = 8'sd1;
    p1_t_1[62] = 8'sd4;
    p1_t_1[63] = 8'sd0;
    p1_t_2[0] = 8'sd1;
    p1_t_2[1] = 8'sd3;
    p1_t_2[2] = 8'sd5;
    p1_t_2[3] = 8'sd7;
    p1_t_2[4] = 8'sd9;
    p1_t_2[5] = 8'sd11;
    p1_t_2[6] = 8'sd13;
    p1_t_2[7] = 8'sd15;
    p1_t_2[8] = 8'sd17;
    p1_t_2[9] = 8'sd19;
    p1_t_2[10] = 8'sd21;
    p1_t_2[11] = 8'sd23;
    p1_t_2[12] = 8'sd25;
    p1_t_2[13] = 8'sd27;
    p1_t_2[14] = 8'sd29;
    p1_t_2[15] = 8'sd31;
    p1_t_2[16] = 8'sd33;
    p1_t_2[17] = 8'sd35;
    p1_t_2[18] = 8'sd37;
    p1_t_2[19] = 8'sd39;
    p1_t_2[20] = 8'sd41;
    p1_t_2[21] = 8'sd43;
    p1_t_2[22] = 8'sd45;
    p1_t_2[23] = 8'sd47;
    p1_t_2[24] = 8'sd49;
    p1_t_2[25] = 8'sd51;
    p1_t_2[26] = 8'sd53;
    p1_t_2[27] = 8'sd55;
    p1_t_2[28] = 8'sd57;
    p1_t_2[29] = 8'sd59;
    p1_t_2[30] = 8'sd61;
    p1_t_2[31] = 8'sd63;
    p1_t_2[32] = 8'sd1;
    p1_t_2[33] = 8'sd3;
    p1_t_2[34] = 8'sd5;
    p1_t_2[35] = 8'sd7;
    p1_t_2[36] = 8'sd9;
    p1_t_2[37] = 8'sd11;
    p1_t_2[38] = 8'sd13;
    p1_t_2[39] = 8'sd15;
    p1_t_2[40] = 8'sd17;
    p1_t_2[41] = 8'sd19;
    p1_t_2[42] = 8'sd21;
    p1_t_2[43] = 8'sd23;
    p1_t_2[44] = 8'sd25;
    p1_t_2[45] = 8'sd27;
    p1_t_2[46] = 8'sd29;
    p1_t_2[47] = 8'sd31;
    p1_t_2[48] = 8'sd33;
    p1_t_2[49] = 8'sd35;
    p1_t_2[50] = 8'sd37;
    p1_t_2[51] = 8'sd39;
    p1_t_2[52] = 8'sd41;
    p1_t_2[53] = 8'sd43;
    p1_t_2[54] = 8'sd45;
    p1_t_2[55] = 8'sd47;
    p1_t_2[56] = 8'sd49;
    p1_t_2[57] = 8'sd51;
    p1_t_2[58] = 8'sd53;
    p1_t_2[59] = 8'sd55;
    p1_t_2[60] = 8'sd57;
    p1_t_2[61] = 8'sd59;
    p1_t_2[62] = 8'sd61;
    p1_t_2[63] = 8'sd63;
    p1_t_3[0] = 8'sd7;
    p1_t_3[1] = 8'sd3;
    p1_t_3[2] = 8'sd6;
    p1_t_3[3] = 8'sd2;
    p1_t_3[4] = 8'sd1;
    p1_t_3[5] = 8'sd5;
    p1_t_3[6] = 8'sd0;
    p1_t_3[7] = 8'sd4;
    p1_t_3[8] = 8'sd0;
    p1_t_3[9] = 8'sd4;
    p1_t_3[10] = 8'sd1;
    p1_t_3[11] = 8'sd5;
    p1_t_3[12] = 8'sd6;
    p1_t_3[13] = 8'sd2;
    p1_t_3[14] = 8'sd7;
    p1_t_3[15] = 8'sd3;
    p1_t_3[16] = 8'sd4;
    p1_t_3[17] = 8'sd0;
    p1_t_3[18] = 8'sd5;
    p1_t_3[19] = 8'sd1;
    p1_t_3[20] = 8'sd2;
    p1_t_3[21] = 8'sd6;
    p1_t_3[22] = 8'sd3;
    p1_t_3[23] = 8'sd7;
    p1_t_3[24] = 8'sd3;
    p1_t_3[25] = 8'sd7;
    p1_t_3[26] = 8'sd2;
    p1_t_3[27] = 8'sd6;
    p1_t_3[28] = 8'sd5;
    p1_t_3[29] = 8'sd1;
    p1_t_3[30] = 8'sd4;
    p1_t_3[31] = 8'sd0;
    p1_t_3[32] = 8'sd0;
    p1_t_3[33] = 8'sd4;
    p1_t_3[34] = 8'sd1;
    p1_t_3[35] = 8'sd5;
    p1_t_3[36] = 8'sd6;
    p1_t_3[37] = 8'sd2;
    p1_t_3[38] = 8'sd7;
    p1_t_3[39] = 8'sd3;
    p1_t_3[40] = 8'sd7;
    p1_t_3[41] = 8'sd3;
    p1_t_3[42] = 8'sd6;
    p1_t_3[43] = 8'sd2;
    p1_t_3[44] = 8'sd1;
    p1_t_3[45] = 8'sd5;
    p1_t_3[46] = 8'sd0;
    p1_t_3[47] = 8'sd4;
    p1_t_3[48] = 8'sd3;
    p1_t_3[49] = 8'sd7;
    p1_t_3[50] = 8'sd2;
    p1_t_3[51] = 8'sd6;
    p1_t_3[52] = 8'sd5;
    p1_t_3[53] = 8'sd1;
    p1_t_3[54] = 8'sd4;
    p1_t_3[55] = 8'sd0;
    p1_t_3[56] = 8'sd4;
    p1_t_3[57] = 8'sd0;
    p1_t_3[58] = 8'sd5;
    p1_t_3[59] = 8'sd1;
    p1_t_3[60] = 8'sd2;
    p1_t_3[61] = 8'sd6;
    p1_t_3[62] = 8'sd3;
    p1_t_3[63] = 8'sd7;
    p1_t_4 = 7'sb0000000;
    p1_newStateMetricA = 7'sb0000000;
    p1_newStateMetricB = 7'sb0000000;

    for(p1_m = 32'sd0; p1_m <= 32'sd63; p1_m = p1_m + 32'sd1) begin
      p1_t_5[p1_m] = {{2{oldStateMetrics_1[p1_t_0[p1_m]][6]}}, oldStateMetrics_1[p1_t_0[p1_m]]};
      p1_t_6[p1_m] = {6'b0, branchMetrics_4[p1_t_1[p1_m]]};
      p1_add_temp[p1_m] = p1_t_5[p1_m] + p1_t_6[p1_m];
      p1_newStateMetricA = p1_add_temp[p1_m][6:0];
      p1_t_7[p1_m] = {{2{oldStateMetrics_1[p1_t_2[p1_m]][6]}}, oldStateMetrics_1[p1_t_2[p1_m]]};
      p1_t_8[p1_m] = {6'b0, branchMetrics_4[p1_t_3[p1_m]]};
      p1_add_temp_0[p1_m] = p1_t_7[p1_m] + p1_t_8[p1_m];
      p1_newStateMetricB = p1_add_temp_0[p1_m][6:0];
      if ((p1_newStateMetricA - p1_newStateMetricB) >= 7'sb0000000) begin
        p1_t_4 = p1_newStateMetricA;
      end
      else begin
        p1_t_4 = p1_newStateMetricB;
      end
      obj_metricComputer_stateMetrics_2[p1_m] = p1_t_4;
    end

  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp44
  always @* begin
    if (tmp_8 == 1'b0) begin
      for(p1_t_11 = 32'sd0; p1_t_11 <= 32'sd63; p1_t_11 = p1_t_11 + 32'sd1) begin
        tmp_13[p1_t_11] = obj_metricComputer_stateMetrics[p1_t_11];
      end
    end
    else begin
      for(p1_t_0_0 = 32'sd0; p1_t_0_0 <= 32'sd63; p1_t_0_0 = p1_t_0_0 + 32'sd1) begin
        tmp_13[p1_t_0_0] = obj_metricComputer_stateMetrics_2[p1_t_0_0];
      end
    end
  end



  always @* begin
    if (tmp_1 == 1'b0) begin
      for(p44_t_1 = 32'sd0; p44_t_1 <= 32'sd63; p44_t_1 = p44_t_1 + 32'sd1) begin
        tmp_12[p44_t_1] = tmp_13[p44_t_1];
      end
    end
    else begin
      for(p44_t_0_0 = 32'sd0; p44_t_0_0 <= 32'sd63; p44_t_0_0 = p44_t_0_0 + 32'sd1) begin
        tmp_12[p44_t_0_0] = tmp_10[p44_t_0_0];
      end
    end
  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp39
  assign obj_metricComputer_stateMetrics_3[0] = tmp_12[0];
  assign obj_metricComputer_stateMetrics_3[1] = tmp_12[1];
  assign obj_metricComputer_stateMetrics_3[2] = tmp_12[2];
  assign obj_metricComputer_stateMetrics_3[3] = tmp_12[3];
  assign obj_metricComputer_stateMetrics_3[4] = tmp_12[4];
  assign obj_metricComputer_stateMetrics_3[5] = tmp_12[5];
  assign obj_metricComputer_stateMetrics_3[6] = tmp_12[6];
  assign obj_metricComputer_stateMetrics_3[7] = tmp_12[7];
  assign obj_metricComputer_stateMetrics_3[8] = tmp_12[8];
  assign obj_metricComputer_stateMetrics_3[9] = tmp_12[9];
  assign obj_metricComputer_stateMetrics_3[10] = tmp_12[10];
  assign obj_metricComputer_stateMetrics_3[11] = tmp_12[11];
  assign obj_metricComputer_stateMetrics_3[12] = tmp_12[12];
  assign obj_metricComputer_stateMetrics_3[13] = tmp_12[13];
  assign obj_metricComputer_stateMetrics_3[14] = tmp_12[14];
  assign obj_metricComputer_stateMetrics_3[15] = tmp_12[15];
  assign obj_metricComputer_stateMetrics_3[16] = tmp_12[16];
  assign obj_metricComputer_stateMetrics_3[17] = tmp_12[17];
  assign obj_metricComputer_stateMetrics_3[18] = tmp_12[18];
  assign obj_metricComputer_stateMetrics_3[19] = tmp_12[19];
  assign obj_metricComputer_stateMetrics_3[20] = tmp_12[20];
  assign obj_metricComputer_stateMetrics_3[21] = tmp_12[21];
  assign obj_metricComputer_stateMetrics_3[22] = tmp_12[22];
  assign obj_metricComputer_stateMetrics_3[23] = tmp_12[23];
  assign obj_metricComputer_stateMetrics_3[24] = tmp_12[24];
  assign obj_metricComputer_stateMetrics_3[25] = tmp_12[25];
  assign obj_metricComputer_stateMetrics_3[26] = tmp_12[26];
  assign obj_metricComputer_stateMetrics_3[27] = tmp_12[27];
  assign obj_metricComputer_stateMetrics_3[28] = tmp_12[28];
  assign obj_metricComputer_stateMetrics_3[29] = tmp_12[29];
  assign obj_metricComputer_stateMetrics_3[30] = tmp_12[30];
  assign obj_metricComputer_stateMetrics_3[31] = tmp_12[31];
  assign obj_metricComputer_stateMetrics_3[32] = tmp_12[32];
  assign obj_metricComputer_stateMetrics_3[33] = tmp_12[33];
  assign obj_metricComputer_stateMetrics_3[34] = tmp_12[34];
  assign obj_metricComputer_stateMetrics_3[35] = tmp_12[35];
  assign obj_metricComputer_stateMetrics_3[36] = tmp_12[36];
  assign obj_metricComputer_stateMetrics_3[37] = tmp_12[37];
  assign obj_metricComputer_stateMetrics_3[38] = tmp_12[38];
  assign obj_metricComputer_stateMetrics_3[39] = tmp_12[39];
  assign obj_metricComputer_stateMetrics_3[40] = tmp_12[40];
  assign obj_metricComputer_stateMetrics_3[41] = tmp_12[41];
  assign obj_metricComputer_stateMetrics_3[42] = tmp_12[42];
  assign obj_metricComputer_stateMetrics_3[43] = tmp_12[43];
  assign obj_metricComputer_stateMetrics_3[44] = tmp_12[44];
  assign obj_metricComputer_stateMetrics_3[45] = tmp_12[45];
  assign obj_metricComputer_stateMetrics_3[46] = tmp_12[46];
  assign obj_metricComputer_stateMetrics_3[47] = tmp_12[47];
  assign obj_metricComputer_stateMetrics_3[48] = tmp_12[48];
  assign obj_metricComputer_stateMetrics_3[49] = tmp_12[49];
  assign obj_metricComputer_stateMetrics_3[50] = tmp_12[50];
  assign obj_metricComputer_stateMetrics_3[51] = tmp_12[51];
  assign obj_metricComputer_stateMetrics_3[52] = tmp_12[52];
  assign obj_metricComputer_stateMetrics_3[53] = tmp_12[53];
  assign obj_metricComputer_stateMetrics_3[54] = tmp_12[54];
  assign obj_metricComputer_stateMetrics_3[55] = tmp_12[55];
  assign obj_metricComputer_stateMetrics_3[56] = tmp_12[56];
  assign obj_metricComputer_stateMetrics_3[57] = tmp_12[57];
  assign obj_metricComputer_stateMetrics_3[58] = tmp_12[58];
  assign obj_metricComputer_stateMetrics_3[59] = tmp_12[59];
  assign obj_metricComputer_stateMetrics_3[60] = tmp_12[60];
  assign obj_metricComputer_stateMetrics_3[61] = tmp_12[61];
  assign obj_metricComputer_stateMetrics_3[62] = tmp_12[62];
  assign obj_metricComputer_stateMetrics_3[63] = tmp_12[63];

  always @* begin
    if (tmp_1 == 1'b0) begin
      for(p39_t_1 = 32'sd0; p39_t_1 <= 32'sd63; p39_t_1 = p39_t_1 + 32'sd1) begin
        tmp_14[p39_t_1] = obj_metricComputer_stateMetrics_3[p39_t_1];
      end
    end
    else begin
      for(p39_t_0_0 = 32'sd0; p39_t_0_0 <= 32'sd63; p39_t_0_0 = p39_t_0_0 + 32'sd1) begin
        tmp_14[p39_t_0_0] = obj_metricComputer_stateMetrics_1[p39_t_0_0];
      end
    end
  end



  always @(posedge clk)
    begin : obj_metricComputer_stateMetrics_reg_process
      if (reset_x == 1'b1) begin
        for(obj_metricComputer_stateMetrics_reg_t_1 = 32'sd0; obj_metricComputer_stateMetrics_reg_t_1 <= 32'sd63; obj_metricComputer_stateMetrics_reg_t_1 = obj_metricComputer_stateMetrics_reg_t_1 + 32'sd1) begin
          obj_metricComputer_stateMetrics_reg_reg[obj_metricComputer_stateMetrics_reg_t_1] <= 7'sb0000000;
        end
      end
      else begin
        if (enb) begin
          for(obj_metricComputer_stateMetrics_reg_t_0_1 = 32'sd0; obj_metricComputer_stateMetrics_reg_t_0_1 <= 32'sd63; obj_metricComputer_stateMetrics_reg_t_0_1 = obj_metricComputer_stateMetrics_reg_t_0_1 + 32'sd1) begin
            obj_metricComputer_stateMetrics_reg_reg[obj_metricComputer_stateMetrics_reg_t_0_1] <= obj_metricComputer_stateMetrics_reg_reg_next[obj_metricComputer_stateMetrics_reg_t_0_1];
          end
        end
      end
    end


  genvar t_0_011;
  generate
    for(t_0_011 = 32'sd0; t_0_011 <= 32'sd63; t_0_011 = t_0_011 + 32'sd1) begin:obj_metricComputer_stateMetrics_reg_reg_next_gen
      assign obj_metricComputer_stateMetrics[t_0_011] = obj_metricComputer_stateMetrics_reg_reg[t_0_011];
      assign obj_metricComputer_stateMetrics_reg_reg_next[t_0_011] = tmp_14[t_0_011];
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp42_trueregionp1

  genvar t_0101;
  generate
    for(t_0101 = 32'sd0; t_0101 <= 32'sd63; t_0101 = t_0101 + 32'sd1) begin:oldStateMetrics_2_gen
      assign oldStateMetrics_2[t_0101] = obj_metricComputer_stateMetrics[t_0101];
    end
  endgenerate




  assign tmp_15 = 1'b0;



  assign tmp_16 = 1'b1;



  assign tmp_17 = {64{1'b0}};



  always @* begin
    p1_t_01[0] = 8'sd0;
    p1_t_01[1] = 8'sd2;
    p1_t_01[2] = 8'sd4;
    p1_t_01[3] = 8'sd6;
    p1_t_01[4] = 8'sd8;
    p1_t_01[5] = 8'sd10;
    p1_t_01[6] = 8'sd12;
    p1_t_01[7] = 8'sd14;
    p1_t_01[8] = 8'sd16;
    p1_t_01[9] = 8'sd18;
    p1_t_01[10] = 8'sd20;
    p1_t_01[11] = 8'sd22;
    p1_t_01[12] = 8'sd24;
    p1_t_01[13] = 8'sd26;
    p1_t_01[14] = 8'sd28;
    p1_t_01[15] = 8'sd30;
    p1_t_01[16] = 8'sd32;
    p1_t_01[17] = 8'sd34;
    p1_t_01[18] = 8'sd36;
    p1_t_01[19] = 8'sd38;
    p1_t_01[20] = 8'sd40;
    p1_t_01[21] = 8'sd42;
    p1_t_01[22] = 8'sd44;
    p1_t_01[23] = 8'sd46;
    p1_t_01[24] = 8'sd48;
    p1_t_01[25] = 8'sd50;
    p1_t_01[26] = 8'sd52;
    p1_t_01[27] = 8'sd54;
    p1_t_01[28] = 8'sd56;
    p1_t_01[29] = 8'sd58;
    p1_t_01[30] = 8'sd60;
    p1_t_01[31] = 8'sd62;
    p1_t_01[32] = 8'sd0;
    p1_t_01[33] = 8'sd2;
    p1_t_01[34] = 8'sd4;
    p1_t_01[35] = 8'sd6;
    p1_t_01[36] = 8'sd8;
    p1_t_01[37] = 8'sd10;
    p1_t_01[38] = 8'sd12;
    p1_t_01[39] = 8'sd14;
    p1_t_01[40] = 8'sd16;
    p1_t_01[41] = 8'sd18;
    p1_t_01[42] = 8'sd20;
    p1_t_01[43] = 8'sd22;
    p1_t_01[44] = 8'sd24;
    p1_t_01[45] = 8'sd26;
    p1_t_01[46] = 8'sd28;
    p1_t_01[47] = 8'sd30;
    p1_t_01[48] = 8'sd32;
    p1_t_01[49] = 8'sd34;
    p1_t_01[50] = 8'sd36;
    p1_t_01[51] = 8'sd38;
    p1_t_01[52] = 8'sd40;
    p1_t_01[53] = 8'sd42;
    p1_t_01[54] = 8'sd44;
    p1_t_01[55] = 8'sd46;
    p1_t_01[56] = 8'sd48;
    p1_t_01[57] = 8'sd50;
    p1_t_01[58] = 8'sd52;
    p1_t_01[59] = 8'sd54;
    p1_t_01[60] = 8'sd56;
    p1_t_01[61] = 8'sd58;
    p1_t_01[62] = 8'sd60;
    p1_t_01[63] = 8'sd62;
    p1_t_12[0] = 8'sd0;
    p1_t_12[1] = 8'sd4;
    p1_t_12[2] = 8'sd1;
    p1_t_12[3] = 8'sd5;
    p1_t_12[4] = 8'sd6;
    p1_t_12[5] = 8'sd2;
    p1_t_12[6] = 8'sd7;
    p1_t_12[7] = 8'sd3;
    p1_t_12[8] = 8'sd7;
    p1_t_12[9] = 8'sd3;
    p1_t_12[10] = 8'sd6;
    p1_t_12[11] = 8'sd2;
    p1_t_12[12] = 8'sd1;
    p1_t_12[13] = 8'sd5;
    p1_t_12[14] = 8'sd0;
    p1_t_12[15] = 8'sd4;
    p1_t_12[16] = 8'sd3;
    p1_t_12[17] = 8'sd7;
    p1_t_12[18] = 8'sd2;
    p1_t_12[19] = 8'sd6;
    p1_t_12[20] = 8'sd5;
    p1_t_12[21] = 8'sd1;
    p1_t_12[22] = 8'sd4;
    p1_t_12[23] = 8'sd0;
    p1_t_12[24] = 8'sd4;
    p1_t_12[25] = 8'sd0;
    p1_t_12[26] = 8'sd5;
    p1_t_12[27] = 8'sd1;
    p1_t_12[28] = 8'sd2;
    p1_t_12[29] = 8'sd6;
    p1_t_12[30] = 8'sd3;
    p1_t_12[31] = 8'sd7;
    p1_t_12[32] = 8'sd7;
    p1_t_12[33] = 8'sd3;
    p1_t_12[34] = 8'sd6;
    p1_t_12[35] = 8'sd2;
    p1_t_12[36] = 8'sd1;
    p1_t_12[37] = 8'sd5;
    p1_t_12[38] = 8'sd0;
    p1_t_12[39] = 8'sd4;
    p1_t_12[40] = 8'sd0;
    p1_t_12[41] = 8'sd4;
    p1_t_12[42] = 8'sd1;
    p1_t_12[43] = 8'sd5;
    p1_t_12[44] = 8'sd6;
    p1_t_12[45] = 8'sd2;
    p1_t_12[46] = 8'sd7;
    p1_t_12[47] = 8'sd3;
    p1_t_12[48] = 8'sd4;
    p1_t_12[49] = 8'sd0;
    p1_t_12[50] = 8'sd5;
    p1_t_12[51] = 8'sd1;
    p1_t_12[52] = 8'sd2;
    p1_t_12[53] = 8'sd6;
    p1_t_12[54] = 8'sd3;
    p1_t_12[55] = 8'sd7;
    p1_t_12[56] = 8'sd3;
    p1_t_12[57] = 8'sd7;
    p1_t_12[58] = 8'sd2;
    p1_t_12[59] = 8'sd6;
    p1_t_12[60] = 8'sd5;
    p1_t_12[61] = 8'sd1;
    p1_t_12[62] = 8'sd4;
    p1_t_12[63] = 8'sd0;
    p1_t_21[0] = 8'sd1;
    p1_t_21[1] = 8'sd3;
    p1_t_21[2] = 8'sd5;
    p1_t_21[3] = 8'sd7;
    p1_t_21[4] = 8'sd9;
    p1_t_21[5] = 8'sd11;
    p1_t_21[6] = 8'sd13;
    p1_t_21[7] = 8'sd15;
    p1_t_21[8] = 8'sd17;
    p1_t_21[9] = 8'sd19;
    p1_t_21[10] = 8'sd21;
    p1_t_21[11] = 8'sd23;
    p1_t_21[12] = 8'sd25;
    p1_t_21[13] = 8'sd27;
    p1_t_21[14] = 8'sd29;
    p1_t_21[15] = 8'sd31;
    p1_t_21[16] = 8'sd33;
    p1_t_21[17] = 8'sd35;
    p1_t_21[18] = 8'sd37;
    p1_t_21[19] = 8'sd39;
    p1_t_21[20] = 8'sd41;
    p1_t_21[21] = 8'sd43;
    p1_t_21[22] = 8'sd45;
    p1_t_21[23] = 8'sd47;
    p1_t_21[24] = 8'sd49;
    p1_t_21[25] = 8'sd51;
    p1_t_21[26] = 8'sd53;
    p1_t_21[27] = 8'sd55;
    p1_t_21[28] = 8'sd57;
    p1_t_21[29] = 8'sd59;
    p1_t_21[30] = 8'sd61;
    p1_t_21[31] = 8'sd63;
    p1_t_21[32] = 8'sd1;
    p1_t_21[33] = 8'sd3;
    p1_t_21[34] = 8'sd5;
    p1_t_21[35] = 8'sd7;
    p1_t_21[36] = 8'sd9;
    p1_t_21[37] = 8'sd11;
    p1_t_21[38] = 8'sd13;
    p1_t_21[39] = 8'sd15;
    p1_t_21[40] = 8'sd17;
    p1_t_21[41] = 8'sd19;
    p1_t_21[42] = 8'sd21;
    p1_t_21[43] = 8'sd23;
    p1_t_21[44] = 8'sd25;
    p1_t_21[45] = 8'sd27;
    p1_t_21[46] = 8'sd29;
    p1_t_21[47] = 8'sd31;
    p1_t_21[48] = 8'sd33;
    p1_t_21[49] = 8'sd35;
    p1_t_21[50] = 8'sd37;
    p1_t_21[51] = 8'sd39;
    p1_t_21[52] = 8'sd41;
    p1_t_21[53] = 8'sd43;
    p1_t_21[54] = 8'sd45;
    p1_t_21[55] = 8'sd47;
    p1_t_21[56] = 8'sd49;
    p1_t_21[57] = 8'sd51;
    p1_t_21[58] = 8'sd53;
    p1_t_21[59] = 8'sd55;
    p1_t_21[60] = 8'sd57;
    p1_t_21[61] = 8'sd59;
    p1_t_21[62] = 8'sd61;
    p1_t_21[63] = 8'sd63;
    p1_t_31[0] = 8'sd7;
    p1_t_31[1] = 8'sd3;
    p1_t_31[2] = 8'sd6;
    p1_t_31[3] = 8'sd2;
    p1_t_31[4] = 8'sd1;
    p1_t_31[5] = 8'sd5;
    p1_t_31[6] = 8'sd0;
    p1_t_31[7] = 8'sd4;
    p1_t_31[8] = 8'sd0;
    p1_t_31[9] = 8'sd4;
    p1_t_31[10] = 8'sd1;
    p1_t_31[11] = 8'sd5;
    p1_t_31[12] = 8'sd6;
    p1_t_31[13] = 8'sd2;
    p1_t_31[14] = 8'sd7;
    p1_t_31[15] = 8'sd3;
    p1_t_31[16] = 8'sd4;
    p1_t_31[17] = 8'sd0;
    p1_t_31[18] = 8'sd5;
    p1_t_31[19] = 8'sd1;
    p1_t_31[20] = 8'sd2;
    p1_t_31[21] = 8'sd6;
    p1_t_31[22] = 8'sd3;
    p1_t_31[23] = 8'sd7;
    p1_t_31[24] = 8'sd3;
    p1_t_31[25] = 8'sd7;
    p1_t_31[26] = 8'sd2;
    p1_t_31[27] = 8'sd6;
    p1_t_31[28] = 8'sd5;
    p1_t_31[29] = 8'sd1;
    p1_t_31[30] = 8'sd4;
    p1_t_31[31] = 8'sd0;
    p1_t_31[32] = 8'sd0;
    p1_t_31[33] = 8'sd4;
    p1_t_31[34] = 8'sd1;
    p1_t_31[35] = 8'sd5;
    p1_t_31[36] = 8'sd6;
    p1_t_31[37] = 8'sd2;
    p1_t_31[38] = 8'sd7;
    p1_t_31[39] = 8'sd3;
    p1_t_31[40] = 8'sd7;
    p1_t_31[41] = 8'sd3;
    p1_t_31[42] = 8'sd6;
    p1_t_31[43] = 8'sd2;
    p1_t_31[44] = 8'sd1;
    p1_t_31[45] = 8'sd5;
    p1_t_31[46] = 8'sd0;
    p1_t_31[47] = 8'sd4;
    p1_t_31[48] = 8'sd3;
    p1_t_31[49] = 8'sd7;
    p1_t_31[50] = 8'sd2;
    p1_t_31[51] = 8'sd6;
    p1_t_31[52] = 8'sd5;
    p1_t_31[53] = 8'sd1;
    p1_t_31[54] = 8'sd4;
    p1_t_31[55] = 8'sd0;
    p1_t_31[56] = 8'sd4;
    p1_t_31[57] = 8'sd0;
    p1_t_31[58] = 8'sd5;
    p1_t_31[59] = 8'sd1;
    p1_t_31[60] = 8'sd2;
    p1_t_31[61] = 8'sd6;
    p1_t_31[62] = 8'sd3;
    p1_t_31[63] = 8'sd7;
    p1_t_41 = 1'b0;

    for(p1_m1 = 32'sd0; p1_m1 <= 32'sd63; p1_m1 = p1_m1 + 32'sd1) begin
      p1_t_51[p1_m1] = {{2{oldStateMetrics_2[p1_t_01[p1_m1]][6]}}, oldStateMetrics_2[p1_t_01[p1_m1]]};
      p1_t_61[p1_m1] = {6'b0, branchMetrics_4[p1_t_12[p1_m1]]};
      p1_add_temp1[p1_m1] = p1_t_51[p1_m1] + p1_t_61[p1_m1];
      p1_sub_cast[p1_m1] = p1_add_temp1[p1_m1][6:0];
      p1_t_71[p1_m1] = {{2{oldStateMetrics_2[p1_t_21[p1_m1]][6]}}, oldStateMetrics_2[p1_t_21[p1_m1]]};
      p1_t_81[p1_m1] = {6'b0, branchMetrics_4[p1_t_31[p1_m1]]};
      p1_add_temp_01[p1_m1] = p1_t_71[p1_m1] + p1_t_81[p1_m1];
      p1_sub_cast_0[p1_m1] = p1_add_temp_01[p1_m1][6:0];
      if ((p1_sub_cast[p1_m1] - p1_sub_cast_0[p1_m1]) >= 7'sb0000000) begin
        p1_t_41 = tmp_15;
      end
      else begin
        p1_t_41 = tmp_16;
      end
      obj_metricComputer_decisions_1[p1_m1] = p1_t_41;
    end

  end



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp42
  assign tmp_19 = (tmp_8 == 1'b0 ? obj_metricComputer_decisions :
              obj_metricComputer_decisions_1);



  assign tmp_18 = (tmp_1 == 1'b0 ? tmp_19 :
              tmp_17);



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp36
  assign obj_metricComputer_decisions_2[0] = tmp_18[0];
  assign obj_metricComputer_decisions_2[1] = tmp_18[1];
  assign obj_metricComputer_decisions_2[2] = tmp_18[2];
  assign obj_metricComputer_decisions_2[3] = tmp_18[3];
  assign obj_metricComputer_decisions_2[4] = tmp_18[4];
  assign obj_metricComputer_decisions_2[5] = tmp_18[5];
  assign obj_metricComputer_decisions_2[6] = tmp_18[6];
  assign obj_metricComputer_decisions_2[7] = tmp_18[7];
  assign obj_metricComputer_decisions_2[8] = tmp_18[8];
  assign obj_metricComputer_decisions_2[9] = tmp_18[9];
  assign obj_metricComputer_decisions_2[10] = tmp_18[10];
  assign obj_metricComputer_decisions_2[11] = tmp_18[11];
  assign obj_metricComputer_decisions_2[12] = tmp_18[12];
  assign obj_metricComputer_decisions_2[13] = tmp_18[13];
  assign obj_metricComputer_decisions_2[14] = tmp_18[14];
  assign obj_metricComputer_decisions_2[15] = tmp_18[15];
  assign obj_metricComputer_decisions_2[16] = tmp_18[16];
  assign obj_metricComputer_decisions_2[17] = tmp_18[17];
  assign obj_metricComputer_decisions_2[18] = tmp_18[18];
  assign obj_metricComputer_decisions_2[19] = tmp_18[19];
  assign obj_metricComputer_decisions_2[20] = tmp_18[20];
  assign obj_metricComputer_decisions_2[21] = tmp_18[21];
  assign obj_metricComputer_decisions_2[22] = tmp_18[22];
  assign obj_metricComputer_decisions_2[23] = tmp_18[23];
  assign obj_metricComputer_decisions_2[24] = tmp_18[24];
  assign obj_metricComputer_decisions_2[25] = tmp_18[25];
  assign obj_metricComputer_decisions_2[26] = tmp_18[26];
  assign obj_metricComputer_decisions_2[27] = tmp_18[27];
  assign obj_metricComputer_decisions_2[28] = tmp_18[28];
  assign obj_metricComputer_decisions_2[29] = tmp_18[29];
  assign obj_metricComputer_decisions_2[30] = tmp_18[30];
  assign obj_metricComputer_decisions_2[31] = tmp_18[31];
  assign obj_metricComputer_decisions_2[32] = tmp_18[32];
  assign obj_metricComputer_decisions_2[33] = tmp_18[33];
  assign obj_metricComputer_decisions_2[34] = tmp_18[34];
  assign obj_metricComputer_decisions_2[35] = tmp_18[35];
  assign obj_metricComputer_decisions_2[36] = tmp_18[36];
  assign obj_metricComputer_decisions_2[37] = tmp_18[37];
  assign obj_metricComputer_decisions_2[38] = tmp_18[38];
  assign obj_metricComputer_decisions_2[39] = tmp_18[39];
  assign obj_metricComputer_decisions_2[40] = tmp_18[40];
  assign obj_metricComputer_decisions_2[41] = tmp_18[41];
  assign obj_metricComputer_decisions_2[42] = tmp_18[42];
  assign obj_metricComputer_decisions_2[43] = tmp_18[43];
  assign obj_metricComputer_decisions_2[44] = tmp_18[44];
  assign obj_metricComputer_decisions_2[45] = tmp_18[45];
  assign obj_metricComputer_decisions_2[46] = tmp_18[46];
  assign obj_metricComputer_decisions_2[47] = tmp_18[47];
  assign obj_metricComputer_decisions_2[48] = tmp_18[48];
  assign obj_metricComputer_decisions_2[49] = tmp_18[49];
  assign obj_metricComputer_decisions_2[50] = tmp_18[50];
  assign obj_metricComputer_decisions_2[51] = tmp_18[51];
  assign obj_metricComputer_decisions_2[52] = tmp_18[52];
  assign obj_metricComputer_decisions_2[53] = tmp_18[53];
  assign obj_metricComputer_decisions_2[54] = tmp_18[54];
  assign obj_metricComputer_decisions_2[55] = tmp_18[55];
  assign obj_metricComputer_decisions_2[56] = tmp_18[56];
  assign obj_metricComputer_decisions_2[57] = tmp_18[57];
  assign obj_metricComputer_decisions_2[58] = tmp_18[58];
  assign obj_metricComputer_decisions_2[59] = tmp_18[59];
  assign obj_metricComputer_decisions_2[60] = tmp_18[60];
  assign obj_metricComputer_decisions_2[61] = tmp_18[61];
  assign obj_metricComputer_decisions_2[62] = tmp_18[62];
  assign obj_metricComputer_decisions_2[63] = tmp_18[63];

  assign tmp_20 = (tmp_1 == 1'b0 ? obj_metricComputer_decisions_2 :
              obj_metricComputer_decisions);



  always @(posedge clk)
    begin : obj_metricComputer_decisions_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_decisions <= {64{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_decisions <= tmp_20;
        end
      end
    end



  assign varargout_1_64 = obj_metricComputer_decisions;



  assign varargout_1_65 = varargout_1_64;



  assign varargout_1_3 = varargout_1_65[3];

  assign varargout_1_4 = varargout_1_65[4];

  assign varargout_1_5 = varargout_1_65[5];

  assign varargout_1_6 = varargout_1_65[6];

  assign varargout_1_7 = varargout_1_65[7];

  assign varargout_1_8 = varargout_1_65[8];

  assign varargout_1_9 = varargout_1_65[9];

  assign varargout_1_10 = varargout_1_65[10];

  assign varargout_1_11 = varargout_1_65[11];

  assign varargout_1_12 = varargout_1_65[12];

  assign varargout_1_13 = varargout_1_65[13];

  assign varargout_1_14 = varargout_1_65[14];

  assign varargout_1_15 = varargout_1_65[15];

  assign varargout_1_16 = varargout_1_65[16];

  assign varargout_1_17 = varargout_1_65[17];

  assign varargout_1_18 = varargout_1_65[18];

  assign varargout_1_19 = varargout_1_65[19];

  assign varargout_1_20 = varargout_1_65[20];

  assign varargout_1_21 = varargout_1_65[21];

  assign varargout_1_22 = varargout_1_65[22];

  assign varargout_1_23 = varargout_1_65[23];

  assign varargout_1_24 = varargout_1_65[24];

  assign varargout_1_25 = varargout_1_65[25];

  assign varargout_1_26 = varargout_1_65[26];

  assign varargout_1_27 = varargout_1_65[27];

  assign varargout_1_28 = varargout_1_65[28];

  assign varargout_1_29 = varargout_1_65[29];

  assign varargout_1_30 = varargout_1_65[30];

  assign varargout_1_31 = varargout_1_65[31];

  assign varargout_1_32 = varargout_1_65[32];

  assign varargout_1_33 = varargout_1_65[33];

  assign varargout_1_34 = varargout_1_65[34];

  assign varargout_1_35 = varargout_1_65[35];

  assign varargout_1_36 = varargout_1_65[36];

  assign varargout_1_37 = varargout_1_65[37];

  assign varargout_1_38 = varargout_1_65[38];

  assign varargout_1_39 = varargout_1_65[39];

  assign varargout_1_40 = varargout_1_65[40];

  assign varargout_1_41 = varargout_1_65[41];

  assign varargout_1_42 = varargout_1_65[42];

  assign varargout_1_43 = varargout_1_65[43];

  assign varargout_1_44 = varargout_1_65[44];

  assign varargout_1_45 = varargout_1_65[45];

  assign varargout_1_46 = varargout_1_65[46];

  assign varargout_1_47 = varargout_1_65[47];

  assign varargout_1_48 = varargout_1_65[48];

  assign varargout_1_49 = varargout_1_65[49];

  assign varargout_1_50 = varargout_1_65[50];

  assign varargout_1_51 = varargout_1_65[51];

  assign varargout_1_52 = varargout_1_65[52];

  assign varargout_1_53 = varargout_1_65[53];

  assign varargout_1_54 = varargout_1_65[54];

  assign varargout_1_55 = varargout_1_65[55];

  assign varargout_1_56 = varargout_1_65[56];

  assign varargout_1_57 = varargout_1_65[57];

  assign varargout_1_58 = varargout_1_65[58];

  assign varargout_1_59 = varargout_1_65[59];

  assign varargout_1_60 = varargout_1_65[60];

  assign varargout_1_61 = varargout_1_65[61];

  assign varargout_1_62 = varargout_1_65[62];

  assign varargout_1_63 = varargout_1_65[63];

  assign tmp_21 = 32'sd0;



  assign tmp_22 = 32'sd0;



  assign tmp_23 = 32'sd0;



  assign tmp_24 = 32'sd0;



  assign tmp_25 = obj_metricComputer_startInPipe[tmp_23 + tmp_24];



  always @* begin
    obj_metricComputer_startInPipe_1 = obj_metricComputer_startInPipe;
    obj_metricComputer_startInPipe_1[tmp_21 + tmp_22] = varargout_2;
  end



  always @* begin
    tmp_26 = obj_metricComputer_startInPipe_1;
    tmp_26[1] = tmp_25;
  end



  always @(posedge clk)
    begin : obj_metricComputer_startInPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_startInPipe <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_startInPipe <= tmp_26;
        end
      end
    end



  assign tmp_27 = obj_metricComputer_startInPipe[1];



  always @(posedge clk)
    begin : obj_metricComputer_startOutPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_startOutPipe <= 1'b0;
      end
      else begin
        if (enb) begin
          obj_metricComputer_startOutPipe <= tmp_27;
        end
      end
    end



  assign tmp_28 = 32'sd0;



  assign tmp_29 = 32'sd0;



  assign tmp_30 = 32'sd0;



  assign tmp_31 = 32'sd0;



  assign tmp_32 = obj_metricComputer_endInPipe[tmp_30 + tmp_31];



  always @* begin
    obj_metricComputer_endInPipe_1 = obj_metricComputer_endInPipe;
    obj_metricComputer_endInPipe_1[tmp_28 + tmp_29] = varargout_3;
  end



  always @* begin
    tmp_33 = obj_metricComputer_endInPipe_1;
    tmp_33[1] = tmp_32;
  end



  always @(posedge clk)
    begin : obj_metricComputer_endInPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_endInPipe <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_endInPipe <= tmp_33;
        end
      end
    end



  assign tmp_34 = obj_metricComputer_endInPipe[1];



  always @(posedge clk)
    begin : obj_metricComputer_endOutPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_endOutPipe <= 1'b0;
      end
      else begin
        if (enb) begin
          obj_metricComputer_endOutPipe <= tmp_34;
        end
      end
    end



  always @(posedge clk)
    begin : obj_metricComputer_validOutPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_validOutPipe <= 1'b0;
      end
      else begin
        if (enb) begin
          obj_metricComputer_validOutPipe <= tmp_8;
        end
      end
    end




  genvar t_0111;
  generate
    for(t_0111 = 32'sd0; t_0111 <= 32'sd63; t_0111 = t_0111 + 32'sd1) begin:stateMetricsOut_gen
      assign stateMetricsOut[t_0111] = 7'sb0000000;
    end
  endgenerate





  genvar t_0121;
  generate
    for(t_0121 = 32'sd0; t_0121 <= 32'sd63; t_0121 = t_0121 + 32'sd1) begin:stateMetricsOut_1_gen
      assign stateMetricsOut_1[t_0121] = obj_metricComputer_stateMetrics[t_0121];
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp25

  genvar t_0131;
  generate
    for(t_0131 = 32'sd0; t_0131 <= 32'sd63; t_0131 = t_0131 + 32'sd1) begin:obj_metricComputer_maxMetrics_1_gen
      assign obj_metricComputer_maxMetrics_1[t_0131] = stateMetricsOut_1[t_0131];
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp25
  always @* begin

    for(p1_t_02 = 32'sd0; p1_t_02 <= 32'sd63; p1_t_02 = p1_t_02 + 32'sd1) begin
      p1_obj_metricComputer_maxMetrics[p1_t_02] = obj_metricComputer_maxMetrics[p1_t_02];
    end


    for(p1_k = 32'sd0; p1_k <= 32'sd31; p1_k = p1_k + 32'sd1) begin
      p1_cast[p1_k] = {{31{p1_k[31]}}, {p1_k, 1'b0}};
      p1_add_cast[p1_k] = {{31{p1_k[31]}}, {p1_k, 1'b0}};
      if ((p1_obj_metricComputer_maxMetrics[p1_cast[p1_k]] - p1_obj_metricComputer_maxMetrics[p1_add_cast[p1_k] + 32'sd1]) >= 7'sb0000000) begin
        p1_cast_0[p1_k] = {{31{p1_k[31]}}, {p1_k, 1'b0}};
        p1_obj_metricComputer_maxMetrics[p1_k] = p1_obj_metricComputer_maxMetrics[p1_cast_0[p1_k]];
      end
      else begin
        p1_add_cast_0[p1_k] = {{31{p1_k[31]}}, {p1_k, 1'b0}};
        p1_obj_metricComputer_maxMetrics[p1_k] = p1_obj_metricComputer_maxMetrics[p1_add_cast_0[p1_k] + 32'sd1];
      end
    end


    for(p1_t_13 = 32'sd0; p1_t_13 <= 32'sd63; p1_t_13 = p1_t_13 + 32'sd1) begin
      obj_metricComputer_maxMetrics_2[p1_t_13] = p1_obj_metricComputer_maxMetrics[p1_t_13];
    end

  end



  always @* begin
    if (obj_metricComputer_endOutPipe == 1'b0) begin
      for(p25_t_1 = 32'sd0; p25_t_1 <= 32'sd63; p25_t_1 = p25_t_1 + 32'sd1) begin
        tmp_35[p25_t_1] = obj_metricComputer_maxMetrics_2[p25_t_1];
      end
    end
    else begin
      for(p25_t_0_0 = 32'sd0; p25_t_0_0 <= 32'sd63; p25_t_0_0 = p25_t_0_0 + 32'sd1) begin
        tmp_35[p25_t_0_0] = obj_metricComputer_maxMetrics_1[p25_t_0_0];
      end
    end
  end



  always @(posedge clk)
    begin : obj_metricComputer_maxMetrics_reg_process
      if (reset_x == 1'b1) begin
        for(obj_metricComputer_maxMetrics_reg_t_1 = 32'sd0; obj_metricComputer_maxMetrics_reg_t_1 <= 32'sd63; obj_metricComputer_maxMetrics_reg_t_1 = obj_metricComputer_maxMetrics_reg_t_1 + 32'sd1) begin
          obj_metricComputer_maxMetrics_reg_reg[obj_metricComputer_maxMetrics_reg_t_1] <= 7'sb0000000;
        end
      end
      else begin
        if (enb) begin
          for(obj_metricComputer_maxMetrics_reg_t_0_1 = 32'sd0; obj_metricComputer_maxMetrics_reg_t_0_1 <= 32'sd63; obj_metricComputer_maxMetrics_reg_t_0_1 = obj_metricComputer_maxMetrics_reg_t_0_1 + 32'sd1) begin
            obj_metricComputer_maxMetrics_reg_reg[obj_metricComputer_maxMetrics_reg_t_0_1] <= obj_metricComputer_maxMetrics_reg_reg_next[obj_metricComputer_maxMetrics_reg_t_0_1];
          end
        end
      end
    end


  genvar t_0_021;
  generate
    for(t_0_021 = 32'sd0; t_0_021 <= 32'sd63; t_0_021 = t_0_021 + 32'sd1) begin:obj_metricComputer_maxMetrics_reg_reg_next_gen
      assign obj_metricComputer_maxMetrics[t_0_021] = obj_metricComputer_maxMetrics_reg_reg[t_0_021];
      assign obj_metricComputer_maxMetrics_reg_reg_next[t_0_021] = tmp_35[t_0_021];
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp30

  genvar k1;
  generate
    for(k1 = 32'sd0; k1 <= 32'sd63; k1 = k1 + 32'sd1) begin:obj_metricComputer_maxStates_1_gen
      assign obj_metricComputer_maxStates_1[k1] = k1[5:0];
    end
  endgenerate




  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp30
  always @* begin

    for(p1_t_03 = 32'sd0; p1_t_03 <= 32'sd63; p1_t_03 = p1_t_03 + 32'sd1) begin
      p1_obj_metricComputer_maxMetrics1[p1_t_03] = obj_metricComputer_maxMetrics[p1_t_03];
      p1_obj_metricComputer_maxStates[p1_t_03] = obj_metricComputer_maxStates[p1_t_03];
    end


    for(p1_k1 = 32'sd0; p1_k1 <= 32'sd31; p1_k1 = p1_k1 + 32'sd1) begin
      p1_cast1[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
      p1_add_cast1[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
      if ((p1_obj_metricComputer_maxMetrics1[p1_cast1[p1_k1]] - p1_obj_metricComputer_maxMetrics1[p1_add_cast1[p1_k1] + 32'sd1]) >= 7'sb0000000) begin
        p1_cast_01[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
        p1_obj_metricComputer_maxMetrics1[p1_k1] = p1_obj_metricComputer_maxMetrics1[p1_cast_01[p1_k1]];
        p1_cast_1[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
        p1_obj_metricComputer_maxStates[p1_k1] = p1_obj_metricComputer_maxStates[p1_cast_1[p1_k1]];
      end
      else begin
        p1_add_cast_01[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
        p1_obj_metricComputer_maxMetrics1[p1_k1] = p1_obj_metricComputer_maxMetrics1[p1_add_cast_01[p1_k1] + 32'sd1];
        p1_add_cast_1[p1_k1] = {{31{p1_k1[31]}}, {p1_k1, 1'b0}};
        p1_obj_metricComputer_maxStates[p1_k1] = p1_obj_metricComputer_maxStates[p1_add_cast_1[p1_k1] + 32'sd1];
      end
    end


    for(p1_t_14 = 32'sd0; p1_t_14 <= 32'sd63; p1_t_14 = p1_t_14 + 32'sd1) begin
      obj_metricComputer_maxStates_2[p1_t_14] = p1_obj_metricComputer_maxStates[p1_t_14];
    end

  end



  always @* begin
    if (obj_metricComputer_endOutPipe == 1'b0) begin
      for(p30_t_1 = 32'sd0; p30_t_1 <= 32'sd63; p30_t_1 = p30_t_1 + 32'sd1) begin
        tmp_36[p30_t_1] = obj_metricComputer_maxStates_2[p30_t_1];
      end
    end
    else begin
      for(p30_t_0_0 = 32'sd0; p30_t_0_0 <= 32'sd63; p30_t_0_0 = p30_t_0_0 + 32'sd1) begin
        tmp_36[p30_t_0_0] = obj_metricComputer_maxStates_1[p30_t_0_0];
      end
    end
  end



  always @(posedge clk)
    begin : obj_metricComputer_maxStates_reg_process
      if (reset_x == 1'b1) begin
        for(obj_metricComputer_maxStates_reg_t_1 = 32'sd0; obj_metricComputer_maxStates_reg_t_1 <= 32'sd63; obj_metricComputer_maxStates_reg_t_1 = obj_metricComputer_maxStates_reg_t_1 + 32'sd1) begin
          obj_metricComputer_maxStates_reg_reg[obj_metricComputer_maxStates_reg_t_1] <= 6'b000000;
        end
      end
      else begin
        if (enb) begin
          for(obj_metricComputer_maxStates_reg_t_0_1 = 32'sd0; obj_metricComputer_maxStates_reg_t_0_1 <= 32'sd63; obj_metricComputer_maxStates_reg_t_0_1 = obj_metricComputer_maxStates_reg_t_0_1 + 32'sd1) begin
            obj_metricComputer_maxStates_reg_reg[obj_metricComputer_maxStates_reg_t_0_1] <= obj_metricComputer_maxStates_reg_reg_next[obj_metricComputer_maxStates_reg_t_0_1];
          end
        end
      end
    end


  genvar t_0_031;
  generate
    for(t_0_031 = 32'sd0; t_0_031 <= 32'sd63; t_0_031 = t_0_031 + 32'sd1) begin:obj_metricComputer_maxStates_reg_reg_next_gen
      assign obj_metricComputer_maxStates[t_0_031] = obj_metricComputer_maxStates_reg_reg[t_0_031];
      assign obj_metricComputer_maxStates_reg_reg_next[t_0_031] = tmp_36[t_0_031];
    end
  endgenerate




  assign varargout_5 = obj_metricComputer_maxStates[0];



  assign tmp_37 = 32'sd0;



  assign tmp_38 = 32'sd0;



  assign tmp_39 = 32'sd0;



  assign tmp_40 = 32'sd0;



  assign tmp_41 = obj_metricComputer_resetInPipe[tmp_39 + tmp_40];



  always @* begin
    obj_metricComputer_resetInPipe_1 = obj_metricComputer_resetInPipe;
    obj_metricComputer_resetInPipe_1[tmp_37 + tmp_38] = tmp_1;
  end



  always @* begin
    tmp_42 = obj_metricComputer_resetInPipe_1;
    tmp_42[1] = tmp_41;
  end



  always @(posedge clk)
    begin : obj_metricComputer_resetInPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_resetInPipe <= {2{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_resetInPipe <= tmp_42;
        end
      end
    end



  assign resetIn_2 = obj_metricComputer_resetInPipe[1];



  assign endOut = {7{1'b0}};



  // HDL code generation from MATLAB function: SystemCore_stepImpl_falseregionp21
  always @* begin
    endOut_1 = endOut;
    endOut_1[0] = obj_metricComputer_endOutPipe;
  end



  assign tmp_43 = 1'b0;



  // HDL code generation from MATLAB function: SystemCore_stepImpl_trueregionp21
  assign obj_metricComputer_maxValidPipe_1 = {32'sd7{tmp_43}};



  always @* begin
    endOut_2 = endOut_1;
    endOut_2[32'sd6:32'sd1] = obj_metricComputer_maxValidPipe[32'sd5:32'sd0];
  end



  assign obj_metricComputer_maxValidPipe_2 = endOut_2;



  assign tmp_44 = (resetIn_2 == 1'b0 ? obj_metricComputer_maxValidPipe_2 :
              obj_metricComputer_maxValidPipe_1);



  always @(posedge clk)
    begin : obj_metricComputer_maxValidPipe_reg_process
      if (reset_x == 1'b1) begin
        obj_metricComputer_maxValidPipe <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          obj_metricComputer_maxValidPipe <= tmp_44;
        end
      end
    end



  assign varargout_6 = obj_metricComputer_maxValidPipe[6];



  assign varargout_1_0_1 = varargout_1_65[0];

  assign varargout_1_1_1 = varargout_1_65[1];

  assign varargout_1_2_1 = varargout_1_65[2];

  assign varargout_2_1 = obj_metricComputer_startOutPipe;

  assign varargout_3_1 = obj_metricComputer_endOutPipe;

  assign varargout_4_1 = obj_metricComputer_validOutPipe;

endmodule  // ConvolutionalDecoderMetricComputer

