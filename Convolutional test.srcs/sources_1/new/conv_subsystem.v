// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\commrshdl\conv_subsystem.v
// Created: 2024-04-11 04:03:31
// 
// Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// dec_data_out                  ce_out        1
// dec_start_out                 ce_out        1
// dec_end_out                   ce_out        1
// dec_valid_out                 ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: conv_subsystem
// Source Path: commrshdl/conv subsystem
// Hierarchy Level: 0
// Model version: 9.74
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module conv_subsystem
          (clk,
           reset_x,
           clk_enable,
           enc_data_in,
           enc_start_in,
           enc_end_in,
           enc_valid_in,
           ce_out,
           dec_data_out,
           dec_start_out,
           dec_end_out,
           dec_valid_out);


  input   clk;
  input   reset_x;
  input   clk_enable;
  input   signed [3:0] enc_data_in;  // sfix4_E14
  input   enc_start_in;
  input   enc_end_in;
  input   enc_valid_in;
  output  ce_out;
  output  dec_data_out;
  output  dec_start_out;
  output  dec_end_out;
  output  dec_valid_out;


  wire Sample_Control_Bus_Creator_out1_start;
  wire Sample_Control_Bus_Creator_out1_end;
  wire Sample_Control_Bus_Creator_out1_valid;
  wire LTE_Convolutional_Encoder1_out1_0;
  wire LTE_Convolutional_Encoder1_out1_1;
  wire LTE_Convolutional_Encoder1_out1_2;
  wire LTE_Convolutional_Encoder1_out2_start;
  wire LTE_Convolutional_Encoder1_out2_end;
  wire LTE_Convolutional_Encoder1_out2_valid;
  wire data;
  wire ctrl_start;
  wire ctrl_end;
  wire ctrl_valid;
  wire start;
  wire end_rsvd;
  wire valid;


  Sample_Control_Bus_Creator u_Sample_Control_Bus_Creator (.In1(enc_start_in),
                                                           .In2(enc_end_in),
                                                           .In3(enc_valid_in),
                                                           .Out1_start(Sample_Control_Bus_Creator_out1_start),
                                                           .Out1_end(Sample_Control_Bus_Creator_out1_end),
                                                           .Out1_valid(Sample_Control_Bus_Creator_out1_valid)
                                                           );

  LTE_Convolutional_Encoder1 u_LTE_Convolutional_Encoder1 (.clk(clk),
                                                           .reset_x(reset_x),
                                                           .enb(clk_enable),
                                                           .dataIn(enc_data_in),  // sfix4_E14
                                                           .ctrlIn_start(Sample_Control_Bus_Creator_out1_start),
                                                           .ctrlIn_end(Sample_Control_Bus_Creator_out1_end),
                                                           .ctrlIn_valid(Sample_Control_Bus_Creator_out1_valid),
                                                           .dataOut_0(LTE_Convolutional_Encoder1_out1_0),  // boolean
                                                           .dataOut_1(LTE_Convolutional_Encoder1_out1_1),  // boolean
                                                           .dataOut_2(LTE_Convolutional_Encoder1_out1_2),  // boolean
                                                           .ctrlOut_start(LTE_Convolutional_Encoder1_out2_start),
                                                           .ctrlOut_end(LTE_Convolutional_Encoder1_out2_end),
                                                           .ctrlOut_valid(LTE_Convolutional_Encoder1_out2_valid)
                                                           );

  LTE_Convolutional_Decoder u_LTE_Convolutional_Decoder (.clk(clk),
                                                         .reset_x(reset_x),
                                                         .enb(clk_enable),
                                                         .data_0(LTE_Convolutional_Encoder1_out1_0),  // boolean
                                                         .data_1(LTE_Convolutional_Encoder1_out1_1),  // boolean
                                                         .data_2(LTE_Convolutional_Encoder1_out1_2),  // boolean
                                                         .ctrl_start(LTE_Convolutional_Encoder1_out2_start),
                                                         .ctrl_end(LTE_Convolutional_Encoder1_out2_end),
                                                         .ctrl_valid(LTE_Convolutional_Encoder1_out2_valid),
                                                         .data1(data),
                                                         .ctrl1_start(ctrl_start),
                                                         .ctrl1_end(ctrl_end),
                                                         .ctrl1_valid(ctrl_valid)
                                                         );

  assign dec_data_out = data;

  assign start = ctrl_start;

  assign dec_start_out = start;

  assign end_rsvd = ctrl_end;

  assign dec_end_out = end_rsvd;

  assign valid = ctrl_valid;

  assign dec_valid_out = valid;

  assign ce_out = clk_enable;

endmodule  // conv_subsystem

